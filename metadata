ModuleMetadata {
    name: "System",
    storage: Some(
        StorageMetadata {
            prefix: "System",
            entries: [
                StorageEntryMetadata {
                    name: "Account",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "AccountInfo<T::Index, T::AccountData>",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The full account information for a particular account ID.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ExtrinsicCount",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Total extrinsics count for the current block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "BlockWeight",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "weights::ExtrinsicsWeight",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The current weight for the block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "AllExtrinsicsLen",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Total length (in bytes) for all extrinsics put together, for the current block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "BlockHash",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::BlockNumber",
                        value: "T::Hash",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Map of block numbers to block hashes.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ExtrinsicData",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "u32",
                        value: "Vec<u8>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Extrinsics data for the current block (maps an extrinsic\'s index to its data).",
                    ],
                },
                StorageEntryMetadata {
                    name: "Number",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The current block number being processed. Set by `execute_block`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ParentHash",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Hash",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Hash of the previous block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ExtrinsicsRoot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Hash",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Extrinsics root of the current block, also part of the block header.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Digest",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "DigestOf<T>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Digest of the current block, also part of the block header.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Events",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<EventRecord<T::Event, T::Hash>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Events deposited for the current block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "EventCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EventIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of events in the `Events<T>` list.",
                    ],
                },
                StorageEntryMetadata {
                    name: "EventTopics",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::Hash",
                        value: "Vec<(T::BlockNumber, EventIndex)>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                        " of events in the `<Events<T>>` list.",
                        "",
                        " All topic vectors have deterministic storage locations depending on the topic. This",
                        " allows light-clients to leverage the changes trie storage tracking mechanism and",
                        " in case of changes fetch the list of events of interest.",
                        "",
                        " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                        " the `EventIndex` then in case if the topic has the same contents on the next block",
                        " no notification will be triggered thus the event might be lost.",
                    ],
                },
                StorageEntryMetadata {
                    name: "LastRuntimeUpgrade",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "LastRuntimeUpgradeInfo",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.",
                    ],
                },
                StorageEntryMetadata {
                    name: "UpgradedToU32RefCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ExecutionPhase",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "Phase",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The execution phase of the block.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "fill_block",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "_ratio",
                        ty: "Perbill",
                    },
                ],
                documentation: [
                    " A dispatch that will fill the block weight up to the given ratio.",
                ],
            },
            FunctionMetadata {
                name: "remark",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "_remark",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Make some on-chain remark.",
                    "",
                    " # <weight>",
                    " - `O(1)`",
                    " - Base Weight: 0.665 µs, independent of remark length.",
                    " - No DB operations.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_heap_pages",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "pages",
                        ty: "u64",
                    },
                ],
                documentation: [
                    " Set the number of pages in the WebAssembly environment\'s heap.",
                    "",
                    " # <weight>",
                    " - `O(1)`",
                    " - 1 storage write.",
                    " - Base Weight: 1.405 µs",
                    " - 1 write to HEAP_PAGES",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_code",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "code",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Set the new runtime code.",
                    "",
                    " # <weight>",
                    " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                    " - 1 storage write (codec `O(C)`).",
                    " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                    " - 1 event.",
                    " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                    " We will treat this as a full block.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_code_without_checks",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "code",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Set the new runtime code without doing any checks of the given `code`.",
                    "",
                    " # <weight>",
                    " - `O(C)` where `C` length of `code`",
                    " - 1 storage write (codec `O(C)`).",
                    " - 1 event.",
                    " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_changes_trie_config",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "changes_trie_config",
                        ty: "Option<ChangesTrieConfiguration>",
                    },
                ],
                documentation: [
                    " Set the new changes trie configuration.",
                    "",
                    " # <weight>",
                    " - `O(1)`",
                    " - 1 storage write or delete (codec `O(1)`).",
                    " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                    " - Base Weight: 7.218 µs",
                    " - DB Weight:",
                    "     - Writes: Changes Trie, System Digest",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_storage",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "items",
                        ty: "Vec<KeyValue>",
                    },
                ],
                documentation: [
                    " Set some items of storage.",
                    "",
                    " # <weight>",
                    " - `O(I)` where `I` length of `items`",
                    " - `I` storage writes (`O(1)`).",
                    " - Base Weight: 0.568 * i µs",
                    " - Writes: Number of items",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "kill_storage",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "keys",
                        ty: "Vec<Key>",
                    },
                ],
                documentation: [
                    " Kill some items from storage.",
                    "",
                    " # <weight>",
                    " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                    " - `I` storage deletions.",
                    " - Base Weight: .378 * i µs",
                    " - Writes: Number of items",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "kill_prefix",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "prefix",
                        ty: "Key",
                    },
                    FunctionArgumentMetadata {
                        name: "_subkeys",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " Kill all storage items with a key that starts with the given prefix.",
                    "",
                    " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                    " the prefix we are removing to accurately calculate the weight of this function.",
                    "",
                    " # <weight>",
                    " - `O(P)` where `P` amount of keys with prefix `prefix`",
                    " - `P` storage deletions.",
                    " - Base Weight: 0.834 * P µs",
                    " - Writes: Number of subkeys + 1",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "suicide",
                arguments: [],
                documentation: [
                    " Kill the sending account, assuming there are no references outstanding and the composite",
                    " data is equal to its default value.",
                    "",
                    " # <weight>",
                    " - `O(1)`",
                    " - 1 storage read and deletion.",
                    " --------------------",
                    " Base Weight: 8.626 µs",
                    " No DB Read or Write operations because caller is already in overlay",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "ExtrinsicSuccess",
                arguments: [
                    "DispatchInfo",
                ],
                documentation: [
                    " An extrinsic completed successfully. \\[info\\]",
                ],
            },
            EventMetadata {
                name: "ExtrinsicFailed",
                arguments: [
                    "DispatchError",
                    "DispatchInfo",
                ],
                documentation: [
                    " An extrinsic failed. \\[error, info\\]",
                ],
            },
            EventMetadata {
                name: "CodeUpdated",
                arguments: [],
                documentation: [
                    " `:code` was updated.",
                ],
            },
            EventMetadata {
                name: "NewAccount",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A new \\[account\\] was created.",
                ],
            },
            EventMetadata {
                name: "KilledAccount",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " An \\[account\\] was reaped.",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "BlockHashCount",
            ty: "T::BlockNumber",
            value: [
                96,
                9,
                0,
                0,
            ],
            documentation: [
                " The maximum number of blocks to allow in mortal eras.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaximumBlockWeight",
            ty: "Weight",
            value: [
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
            ],
            documentation: [
                " The maximum weight of a block.",
            ],
        },
        ModuleConstantMetadata {
            name: "DbWeight",
            ty: "RuntimeDbWeight",
            value: [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The weight of runtime database operations the runtime can invoke.",
            ],
        },
        ModuleConstantMetadata {
            name: "BlockExecutionWeight",
            ty: "Weight",
            value: [
                0,
                242,
                5,
                42,
                1,
                0,
                0,
                0,
            ],
            documentation: [
                " The base weight of executing a block, independent of the transactions in the block.",
            ],
        },
        ModuleConstantMetadata {
            name: "ExtrinsicBaseWeight",
            ty: "Weight",
            value: [
                64,
                89,
                115,
                7,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The base weight of an Extrinsic in the block, independent of the of extrinsic being executed.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaximumBlockLength",
            ty: "u32",
            value: [
                0,
                0,
                80,
                0,
            ],
            documentation: [
                " The maximum length of a block (in bytes).",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "InvalidSpecName",
            documentation: [
                " The name of specification does not match between the current runtime",
                " and the new runtime.",
            ],
        },
        ErrorMetadata {
            name: "SpecVersionNeedsToIncrease",
            documentation: [
                " The specification version is not allowed to decrease between the current runtime",
                " and the new runtime.",
            ],
        },
        ErrorMetadata {
            name: "FailedToExtractRuntimeVersion",
            documentation: [
                " Failed to extract the runtime version from the new runtime.",
                "",
                " Either calling `Core_version` or decoding `RuntimeVersion` failed.",
            ],
        },
        ErrorMetadata {
            name: "NonDefaultComposite",
            documentation: [
                " Suicide called when the account has non-default composite data.",
            ],
        },
        ErrorMetadata {
            name: "NonZeroRefCount",
            documentation: [
                " There is a non-zero reference count preventing the account from being purged.",
            ],
        },
    ],
    index: 0,
}
 2020-11-21T11:59:29.133Z TRACE substrater::darwinia > ModuleMetadata {
    name: "RandomnessCollectiveFlip",
    storage: Some(
        StorageMetadata {
            prefix: "RandomnessCollectiveFlip",
            entries: [
                StorageEntryMetadata {
                    name: "RandomMaterial",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::Hash>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Series of block headers from the last 81 blocks that acts as random seed material. This",
                        " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                        " the oldest hash.",
                    ],
                },
            ],
        },
    ),
    calls: None,
    event: None,
    constants: [],
    errors: [],
    index: 1,
}
 2020-11-21T11:59:29.133Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Babe",
    storage: Some(
        StorageMetadata {
            prefix: "Babe",
            entries: [
                StorageEntryMetadata {
                    name: "EpochIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current epoch index.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Authorities",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(AuthorityId, BabeAuthorityWeight)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Current epoch authorities.",
                    ],
                },
                StorageEntryMetadata {
                    name: "GenesisSlot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The slot at which the first epoch actually started. This is 0",
                        " until the first block of the chain.",
                    ],
                },
                StorageEntryMetadata {
                    name: "CurrentSlot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current slot number.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Randomness",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "schnorrkel::Randomness",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The epoch randomness for the *current* epoch.",
                        "",
                        " # Security",
                        "",
                        " This MUST NOT be used for gambling, as it can be influenced by a",
                        " malicious validator in the short term. It MAY be used in many",
                        " cryptographic protocols, however, so long as one remembers that this",
                        " (like everything else on-chain) it is public. For example, it can be",
                        " used where a number is needed that cannot have been chosen by an",
                        " adversary, for purposes such as public-coin zero-knowledge proofs.",
                    ],
                },
                StorageEntryMetadata {
                    name: "NextEpochConfig",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "NextConfigDescriptor",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Next epoch configuration, if changed.",
                    ],
                },
                StorageEntryMetadata {
                    name: "NextRandomness",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "schnorrkel::Randomness",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Next epoch randomness.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SegmentIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Randomness under construction.",
                        "",
                        " We make a tradeoff between storage accesses and list length.",
                        " We store the under-construction randomness in segments of up to",
                        " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                        "",
                        " Once a segment reaches this length, we begin the next one.",
                        " We reset all segments and return to `0` at the beginning of every",
                        " epoch.",
                    ],
                },
                StorageEntryMetadata {
                    name: "UnderConstruction",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "u32",
                        value: "Vec<schnorrkel::Randomness>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Initialized",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "MaybeRandomness",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Temporary value (cleared at block finalization) which is `Some`",
                        " if per-block initialization has already been called for current block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Lateness",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " How late the current block is compared to its parent.",
                        "",
                        " This entry is populated as part of block execution and is cleaned up",
                        " on block finalization. Querying this storage entry outside of block",
                        " execution context should always yield zero.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "report_equivocation",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "equivocation_proof",
                        ty: "EquivocationProof<T::Header>",
                    },
                    FunctionArgumentMetadata {
                        name: "key_owner_proof",
                        ty: "T::KeyOwnerProof",
                    },
                ],
                documentation: [
                    " Report authority equivocation/misbehavior. This method will verify",
                    " the equivocation proof and validate the given key ownership proof",
                    " against the extracted offender. If both are valid, the offence will",
                    " be reported.",
                ],
            },
            FunctionMetadata {
                name: "report_equivocation_unsigned",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "equivocation_proof",
                        ty: "EquivocationProof<T::Header>",
                    },
                    FunctionArgumentMetadata {
                        name: "key_owner_proof",
                        ty: "T::KeyOwnerProof",
                    },
                ],
                documentation: [
                    " Report authority equivocation/misbehavior. This method will verify",
                    " the equivocation proof and validate the given key ownership proof",
                    " against the extracted offender. If both are valid, the offence will",
                    " be reported.",
                    " This extrinsic must be called unsigned and it is expected that only",
                    " block authors will call it (validated in `ValidateUnsigned`), as such",
                    " if the block author is defined it will be defined as the equivocation",
                    " reporter.",
                ],
            },
        ],
    ),
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "EpochDuration",
            ty: "u64",
            value: [
                96,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The number of **slots** that an epoch takes. We couple sessions to",
                " epochs, i.e. we start a new session once the new epoch begins.",
            ],
        },
        ModuleConstantMetadata {
            name: "ExpectedBlockTime",
            ty: "T::Moment",
            value: [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty).",
            ],
        },
    ],
    errors: [],
    index: 2,
}
 2020-11-21T11:59:29.152Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Timestamp",
    storage: Some(
        StorageMetadata {
            prefix: "Timestamp",
            entries: [
                StorageEntryMetadata {
                    name: "Now",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Moment",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current time for the current block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "DidUpdate",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Did the timestamp get updated in this block?",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "set",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "now",
                        ty: "Compact<T::Moment>",
                    },
                ],
                documentation: [
                    " Set the current time.",
                    "",
                    " This call should be invoked exactly once per block. It will panic at the finalization",
                    " phase, if this call hasn\'t been invoked by that time.",
                    "",
                    " The timestamp should be greater than the previous one by the amount specified by",
                    " `MinimumPeriod`.",
                    "",
                    " The dispatch origin for this call must be `Inherent`.",
                    "",
                    " # <weight>",
                    " - `O(T)` where `T` complexity of `on_timestamp_set`",
                    " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                    " - 1 event handler `on_timestamp_set` `O(T)`.",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "MinimumPeriod",
            ty: "T::Moment",
            value: [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The minimum period between blocks. Beware that this is different to the *expected* period",
                " that the block production apparatus provides. Your chosen consensus system will generally",
                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                " period on default settings.",
            ],
        },
    ],
    errors: [],
    index: 3,
}
 2020-11-21T11:59:29.152Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Balances",
    storage: Some(
        StorageMetadata {
            prefix: "Instance0DarwiniaBalances",
            entries: [
                StorageEntryMetadata {
                    name: "TotalIssuance",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Balance",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total units issued in the system.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Account",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "T::BalanceInfo",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The balance of an account.",
                        "",
                        " NOTE: This is only used in the case that this module is used to store balances.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Locks",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "Vec<BalanceLock<T::Balance, T::BlockNumber>>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Any liquidity locks on some account balances.",
                        " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "transfer",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "dest",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Transfer some liquid free balance to another account.",
                    "",
                    " `transfer` will set the `FreeBalance` of the sender and receiver.",
                    " It will decrease the total issuance of the system by the `TransferFee`.",
                    " If the sender\'s account is below the existential deposit as a result",
                    " of the transfer, the account will be reaped.",
                    "",
                    " The dispatch origin for this call must be `Signed` by the transactor.",
                    "",
                    " # <weight>",
                    " - Dependent on arguments but not critical, given proper implementations for",
                    "   input config types. See related functions below.",
                    " - It contains a limited number of reads and writes internally and no complex computation.",
                    "",
                    " Related functions:",
                    "",
                    "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                    "   - Transferring balances to accounts that did not exist before will cause",
                    "      `T::OnNewAccount::on_new_account` to be called.",
                    "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                    "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                    "     check that the transfer will not kill the origin account.",
                    "",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_balance",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "new_free",
                        ty: "Compact<T::Balance>",
                    },
                    FunctionArgumentMetadata {
                        name: "new_reserved",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Set the balances of a given account.",
                    "",
                    " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                    " also decrease the total issuance of the system (`TotalIssuance`).",
                    " If the new free or reserved balance is below the existential deposit,",
                    " it will reset the account nonce (`frame_system::AccountNonce`).",
                    "",
                    " The dispatch origin for this call is `root`.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments.",
                    " - Contains a limited number of reads and writes.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_transfer",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "source",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "dest",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Exactly as `transfer`, except the origin must be root and the source account may be",
                    " specified.",
                    " # <weight>",
                    " - Same as transfer, but additional read and write because the source account is",
                    "   not assumed to be in the overlay.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "transfer_keep_alive",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "dest",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                    " origin account.",
                    "",
                    " 99% of the time you want [`transfer`] instead.",
                    "",
                    " [`transfer`]: struct.Module.html#method.transfer",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Endowed",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " An account was created with some free balance. [account, free_balance]",
                ],
            },
            EventMetadata {
                name: "DustLost",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    " resulting in an outright loss. [account, balance]",
                ],
            },
            EventMetadata {
                name: "Transfer",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Transfer succeeded. [from, to, value]",
                ],
            },
            EventMetadata {
                name: "BalanceSet",
                arguments: [
                    "AccountId",
                    "Balance",
                    "Balance",
                ],
                documentation: [
                    " A balance was set by root. [who, free, reserved]",
                ],
            },
            EventMetadata {
                name: "Deposit",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Some amount was deposited (e.g. for transaction fees). [who, deposit]",
                ],
            },
            EventMetadata {
                name: "Reserved",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Some balance was reserved (moved from free to reserved). [who, value]",
                ],
            },
            EventMetadata {
                name: "Unreserved",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Some balance was unreserved (moved from reserved to free). [who, value]",
                ],
            },
            EventMetadata {
                name: "ReserveRepatriated",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                    "Status",
                ],
                documentation: [
                    " Some balance was moved from the reserve of the first account to the second account.",
                    " Final argument indicates the destination balance type.",
                    " [from, to, balance, destination_status]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ExistentialDeposit",
            ty: "T::Balance",
            value: [
                160,
                134,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The minimum amount required to keep an account open.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "VestingBalance",
            documentation: [
                " Vesting balance too high to send value",
            ],
        },
        ErrorMetadata {
            name: "LiquidityRestrictions",
            documentation: [
                " Account liquidity restrictions prevent withdrawal",
            ],
        },
        ErrorMetadata {
            name: "Overflow",
            documentation: [
                " Got an overflow after adding",
            ],
        },
        ErrorMetadata {
            name: "InsufficientBalance",
            documentation: [
                " Balance too low to send value",
            ],
        },
        ErrorMetadata {
            name: "ExistentialDeposit",
            documentation: [
                " Value too low to create account due to existential deposit",
            ],
        },
        ErrorMetadata {
            name: "KeepAlive",
            documentation: [
                " Transfer/payment would kill account",
            ],
        },
        ErrorMetadata {
            name: "ExistingVestingSchedule",
            documentation: [
                " A vesting schedule already exists for this account",
            ],
        },
        ErrorMetadata {
            name: "DeadAccount",
            documentation: [
                " Beneficiary account must pre-exist",
            ],
        },
        ErrorMetadata {
            name: "LockP",
            documentation: [
                " Lock - POISONED",
            ],
        },
    ],
    index: 4,
}
 2020-11-21T11:59:29.153Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Kton",
    storage: Some(
        StorageMetadata {
            prefix: "Instance1DarwiniaBalances",
            entries: [
                StorageEntryMetadata {
                    name: "TotalIssuance",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Balance",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total units issued in the system.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Account",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "T::BalanceInfo",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The balance of an account.",
                        "",
                        " NOTE: This is only used in the case that this module is used to store balances.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Locks",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "Vec<BalanceLock<T::Balance, T::BlockNumber>>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Any liquidity locks on some account balances.",
                        " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "transfer",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "dest",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Transfer some liquid free balance to another account.",
                    "",
                    " `transfer` will set the `FreeBalance` of the sender and receiver.",
                    " It will decrease the total issuance of the system by the `TransferFee`.",
                    " If the sender\'s account is below the existential deposit as a result",
                    " of the transfer, the account will be reaped.",
                    "",
                    " The dispatch origin for this call must be `Signed` by the transactor.",
                    "",
                    " # <weight>",
                    " - Dependent on arguments but not critical, given proper implementations for",
                    "   input config types. See related functions below.",
                    " - It contains a limited number of reads and writes internally and no complex computation.",
                    "",
                    " Related functions:",
                    "",
                    "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                    "   - Transferring balances to accounts that did not exist before will cause",
                    "      `T::OnNewAccount::on_new_account` to be called.",
                    "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                    "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                    "     check that the transfer will not kill the origin account.",
                    "",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_balance",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "new_free",
                        ty: "Compact<T::Balance>",
                    },
                    FunctionArgumentMetadata {
                        name: "new_reserved",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Set the balances of a given account.",
                    "",
                    " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                    " also decrease the total issuance of the system (`TotalIssuance`).",
                    " If the new free or reserved balance is below the existential deposit,",
                    " it will reset the account nonce (`frame_system::AccountNonce`).",
                    "",
                    " The dispatch origin for this call is `root`.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments.",
                    " - Contains a limited number of reads and writes.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_transfer",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "source",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "dest",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Exactly as `transfer`, except the origin must be root and the source account may be",
                    " specified.",
                    " # <weight>",
                    " - Same as transfer, but additional read and write because the source account is",
                    "   not assumed to be in the overlay.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "transfer_keep_alive",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "dest",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<T::Balance>",
                    },
                ],
                documentation: [
                    " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                    " origin account.",
                    "",
                    " 99% of the time you want [`transfer`] instead.",
                    "",
                    " [`transfer`]: struct.Module.html#method.transfer",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Endowed",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " An account was created with some free balance. [account, free_balance]",
                ],
            },
            EventMetadata {
                name: "DustLost",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    " resulting in an outright loss. [account, balance]",
                ],
            },
            EventMetadata {
                name: "Transfer",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Transfer succeeded. [from, to, value]",
                ],
            },
            EventMetadata {
                name: "BalanceSet",
                arguments: [
                    "AccountId",
                    "Balance",
                    "Balance",
                ],
                documentation: [
                    " A balance was set by root. [who, free, reserved]",
                ],
            },
            EventMetadata {
                name: "Deposit",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Some amount was deposited (e.g. for transaction fees). [who, deposit]",
                ],
            },
            EventMetadata {
                name: "Reserved",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Some balance was reserved (moved from free to reserved). [who, value]",
                ],
            },
            EventMetadata {
                name: "Unreserved",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " Some balance was unreserved (moved from reserved to free). [who, value]",
                ],
            },
            EventMetadata {
                name: "ReserveRepatriated",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                    "Status",
                ],
                documentation: [
                    " Some balance was moved from the reserve of the first account to the second account.",
                    " Final argument indicates the destination balance type.",
                    " [from, to, balance, destination_status]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ExistentialDeposit",
            ty: "T::Balance",
            value: [
                232,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The minimum amount required to keep an account open.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "VestingBalance",
            documentation: [
                " Vesting balance too high to send value",
            ],
        },
        ErrorMetadata {
            name: "LiquidityRestrictions",
            documentation: [
                " Account liquidity restrictions prevent withdrawal",
            ],
        },
        ErrorMetadata {
            name: "Overflow",
            documentation: [
                " Got an overflow after adding",
            ],
        },
        ErrorMetadata {
            name: "InsufficientBalance",
            documentation: [
                " Balance too low to send value",
            ],
        },
        ErrorMetadata {
            name: "ExistentialDeposit",
            documentation: [
                " Value too low to create account due to existential deposit",
            ],
        },
        ErrorMetadata {
            name: "KeepAlive",
            documentation: [
                " Transfer/payment would kill account",
            ],
        },
        ErrorMetadata {
            name: "ExistingVestingSchedule",
            documentation: [
                " A vesting schedule already exists for this account",
            ],
        },
        ErrorMetadata {
            name: "DeadAccount",
            documentation: [
                " Beneficiary account must pre-exist",
            ],
        },
        ErrorMetadata {
            name: "LockP",
            documentation: [
                " Lock - POISONED",
            ],
        },
    ],
    index: 5,
}
 2020-11-21T11:59:29.153Z TRACE substrater::darwinia > ModuleMetadata {
    name: "TransactionPayment",
    storage: Some(
        StorageMetadata {
            prefix: "TransactionPayment",
            entries: [
                StorageEntryMetadata {
                    name: "NextFeeMultiplier",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Multiplier",
                    ),
                    default: [
                        0,
                        0,
                        100,
                        167,
                        179,
                        182,
                        224,
                        13,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "StorageVersion",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Releases",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [],
                },
            ],
        },
    ),
    calls: None,
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "TransactionByteFee",
            ty: "BalanceOf<T>",
            value: [
                80,
                195,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The fee to be paid for making a transaction; the per-byte portion.",
            ],
        },
        ModuleConstantMetadata {
            name: "WeightToFee",
            ty: "Vec<WeightToFeeCoefficient<BalanceOf<T>>>",
            value: [
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                180,
                196,
                4,
                0,
                1,
            ],
            documentation: [
                " The polynomial that is applied in order to derive fee from weight.",
            ],
        },
    ],
    errors: [],
    index: 6,
}
 2020-11-21T11:59:29.165Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Authorship",
    storage: Some(
        StorageMetadata {
            prefix: "Authorship",
            entries: [
                StorageEntryMetadata {
                    name: "Uncles",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<UncleEntryItem<T::BlockNumber, T::Hash, T::AccountId>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Uncles",
                    ],
                },
                StorageEntryMetadata {
                    name: "Author",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Author of current block.",
                    ],
                },
                StorageEntryMetadata {
                    name: "DidSetUncles",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Whether uncles were already set in this block.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "set_uncles",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new_uncles",
                        ty: "Vec<T::Header>",
                    },
                ],
                documentation: [
                    " Provide a set of uncles.",
                ],
            },
        ],
    ),
    event: None,
    constants: [],
    errors: [
        ErrorMetadata {
            name: "InvalidUncleParent",
            documentation: [
                " The uncle parent not in the chain.",
            ],
        },
        ErrorMetadata {
            name: "UnclesAlreadySet",
            documentation: [
                " Uncles already set in the block.",
            ],
        },
        ErrorMetadata {
            name: "TooManyUncles",
            documentation: [
                " Too many uncles.",
            ],
        },
        ErrorMetadata {
            name: "GenesisUncle",
            documentation: [
                " The uncle is genesis.",
            ],
        },
        ErrorMetadata {
            name: "TooHighUncle",
            documentation: [
                " The uncle is too high in chain.",
            ],
        },
        ErrorMetadata {
            name: "UncleAlreadyIncluded",
            documentation: [
                " The uncle is already included.",
            ],
        },
        ErrorMetadata {
            name: "OldUncle",
            documentation: [
                " The uncle isn\'t recent enough to be included.",
            ],
        },
    ],
    index: 7,
}
 2020-11-21T11:59:29.180Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Staking",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaStaking",
            entries: [
                StorageEntryMetadata {
                    name: "HistoryDepth",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        80,
                        1,
                        0,
                        0,
                    ],
                    documentation: [
                        " Number of eras to keep in history.",
                        "",
                        " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                        "",
                        " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                        " always be in history. I.e. `active_era > current_era - history_depth` must be",
                        " guaranteed.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ValidatorCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The ideal number of staking participants.",
                    ],
                },
                StorageEntryMetadata {
                    name: "MinimumValidatorCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Minimum number of staking participants before emergency conditions are imposed.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Invulnerables",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Any validators that may never be slashed or forcibly kicked. It\'s a Vec since they\'re",
                        " easy to initialize and the performance hit is minimal (we expect no more than four",
                        " invulnerables) and restricted to testnets.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Bonded",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "T::AccountId",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Map from all locked \"stash\" accounts to the controller account.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Ledger",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "StakingLedgerT<T>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Payee",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "RewardDestination<T::AccountId>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Where the reward payment should be made. Keyed by stash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Validators",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "ValidatorPrefs",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The map from (wannabe) validator stash key to the preferences of that validator.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Nominators",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "Nominations<T::AccountId>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                    ],
                },
                StorageEntryMetadata {
                    name: "CurrentEra",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "EraIndex",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current era index.",
                        "",
                        " This is the latest planned era, depending on how the Session pallet queues the validator",
                        " set, it might be active or not.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ActiveEra",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "ActiveEraInfo",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The active era information, it holds index and start.",
                        "",
                        " The active era is the era currently rewarded.",
                        " Validator set of this era must be equal to `SessionInterface::validators`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasStartSessionIndex",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "EraIndex",
                        value: "SessionIndex",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasStakers",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "ExposureT<T>",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Exposure of validator at era.",
                        "",
                        " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                        "",
                        " Is it removed after `HISTORY_DEPTH` eras.",
                        " If stakers hasn\'t been set or has been removed then empty exposure is returned.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasStakersClipped",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "ExposureT<T>",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Clipped Exposure of validator at era.",
                        "",
                        " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                        " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                        " This is used to limit the i/o cost for the nominator payout.",
                        "",
                        " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                        "",
                        " Is it removed after `HISTORY_DEPTH` eras.",
                        " If stakers hasn\'t been set or has been removed then empty exposure is returned.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasValidatorPrefs",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "ValidatorPrefs",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Similar to `ErasStakers`, this holds the preferences of validators.",
                        "",
                        " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                        "",
                        " Is it removed after `HISTORY_DEPTH` eras.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasValidatorReward",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "EraIndex",
                        value: "RingBalance<T>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                        "",
                        " Eras that haven\'t finished yet or has been removed doesn\'t have reward.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasRewardPoints",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "EraIndex",
                        value: "EraRewardPoints<T::AccountId>",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Rewards for the last `HISTORY_DEPTH` eras.",
                        " If reward hasn\'t been set or has been removed then 0 reward is returned.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ErasTotalStake",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "EraIndex",
                        value: "Power",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total amount staked for the last `HISTORY_DEPTH` eras.",
                        " If total hasn\'t been set or has been removed then 0 stake is returned.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ForceEra",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Forcing",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Mode of era forcing.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SlashRewardFraction",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Perbill",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The percentage of the slash that is distributed to reporters.",
                        "",
                        " The rest of the slashed value is handled by the `Slash`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "CanceledSlashPayout",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Power",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The amount of currency given to reporters of a slash event which was",
                        " canceled by extraordinary circumstances (e.g. governance).",
                    ],
                },
                StorageEntryMetadata {
                    name: "UnappliedSlashes",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "EraIndex",
                        value: "Vec<UnappliedSlash<T::AccountId, RingBalance<T>, KtonBalance<T>>\n>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All unapplied slashes that are queued for later.",
                    ],
                },
                StorageEntryMetadata {
                    name: "BondedEras",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(EraIndex, SessionIndex)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " A mapping from still-bonded eras to the first session index of that era.",
                        "",
                        " Must contains information for eras for the range:",
                        " `[active_era - bounding_duration; active_era]`",
                    ],
                },
                StorageEntryMetadata {
                    name: "ValidatorSlashInEra",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "(Perbill, slashing::RKT<T>)",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All slashing events on validators, mapped by era to the highest slash proportion",
                        " and slash value of the era.",
                    ],
                },
                StorageEntryMetadata {
                    name: "NominatorSlashInEra",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "slashing::RKT<T>",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All slashing events on nominators, mapped by era to the highest slash value of the era.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SlashingSpans",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "slashing::SlashingSpans",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Slashing spans for stash accounts.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SpanSlash",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "(T::AccountId, slashing::SpanIndex)",
                        value: "slashing::SpanRecord<RingBalance<T>, KtonBalance<T>>",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Records information about the maximum slash of a stash within a slashing span,",
                        " as well as how much reward has been paid out.",
                    ],
                },
                StorageEntryMetadata {
                    name: "EarliestUnappliedSlash",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "EraIndex",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The earliest era for which we have a pending, unapplied slash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SnapshotValidators",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Snapshot of validators at the beginning of the current election window. This should only",
                        " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SnapshotNominators",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Snapshot of nominators at the beginning of the current election window. This should only",
                        " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "QueuedElected",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "ElectionResultT<T>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The next validator set. At the end of an era, if this is available (potentially from the",
                        " result of an offchain worker), it is immediately used. Otherwise, the on-chain election",
                        " is executed.",
                    ],
                },
                StorageEntryMetadata {
                    name: "QueuedScore",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "ElectionScore",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The score of the current [`QueuedElected`].",
                    ],
                },
                StorageEntryMetadata {
                    name: "EraElectionStatus",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "ElectionStatus<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Flag to control the execution of the offchain election. When `Open(_)`, we accept",
                        " solutions to be submitted.",
                    ],
                },
                StorageEntryMetadata {
                    name: "IsCurrentSessionFinal",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " True if the current **planned** session is final. Note that this does not take era",
                        " forcing into account.",
                    ],
                },
                StorageEntryMetadata {
                    name: "LivingTime",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "TsInMs",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The chain\'s running time form genesis in milliseconds,",
                        " use for calculate darwinia era payout",
                    ],
                },
                StorageEntryMetadata {
                    name: "PayoutFraction",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Perbill",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The percentage of the total payout that is distributed to validators and nominators",
                        "",
                        " The reset might go to Treasury or something else.",
                    ],
                },
                StorageEntryMetadata {
                    name: "RingPool",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "RingBalance<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Total *RING* in pool.",
                    ],
                },
                StorageEntryMetadata {
                    name: "KtonPool",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "KtonBalance<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Total *KTON* in pool.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "bond",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "controller",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "StakingBalanceT<T>",
                    },
                    FunctionArgumentMetadata {
                        name: "payee",
                        ty: "RewardDestination<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "promise_month",
                        ty: "u8",
                    },
                ],
                documentation: [
                    " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                    " be the account that controls it.",
                    "",
                    " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the stash account.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Moderate complexity.",
                    " - O(1).",
                    " - Three extra DB entries.",
                    "",
                    " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                    " unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                    " ------------------",
                    " Weight: O(1)",
                    " DB Weight:",
                    " - Read: Bonded, Ledger, [Origin Account], Current Era, History Depth, Locks",
                    " - Write: Bonded, Payee, [Origin Account], Locks, Ledger",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "bond_extra",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "max_additional",
                        ty: "StakingBalanceT<T>",
                    },
                    FunctionArgumentMetadata {
                        name: "promise_month",
                        ty: "u8",
                    },
                ],
                documentation: [
                    " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                    " for staking.",
                    "",
                    " Use this if there are additional funds in your stash account that you wish to bond.",
                    " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                    " that can be added.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller and",
                    " it can be only called when [`EraElectionStatus`] is `Closed`.",
                    "",
                    " Emits `Bonded`.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - O(1).",
                    " - One DB entry.",
                    " ------------",
                    " DB Weight:",
                    " - Read: Era Election Status, Bonded, Ledger, [Origin Account], Locks",
                    " - Write: [Origin Account], Locks, Ledger",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "deposit_extra",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "RingBalance<T>",
                    },
                    FunctionArgumentMetadata {
                        name: "promise_month",
                        ty: "u8",
                    },
                ],
                documentation: [
                    " Deposit some extra amount ring, and return kton to the controller.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                    "",
                    " Is a no-op if value to be deposited is zero.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - O(1).",
                    " - One DB entry.",
                    " ------------",
                    " DB Weight:",
                    " - Read: Era Election Status, Bonded, Ledger, [Origin Account]",
                    " - Write: [Origin Account], Ledger",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "unbond",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "StakingBalanceT<T>",
                    },
                ],
                documentation: [
                    " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                    " period ends. If this leaves an amount actively bonded less than",
                    " T::Currency::minimum_balance(), then it is increased to the full amount.",
                    "",
                    " Once the unlock period is done, the funds will be withdrew automatically and ready for transfer.",
                    "",
                    " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                    " can co-exists at the same time. In that case,  [`StakingLock::shrink`] need",
                    " to be called first to remove some of the chunks (if possible).",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                    "",
                    " After all pledged Ring and Kton are unbonded, the bonded accounts, namely stash and",
                    " controller, will also be unbonded.  Once user want to bond again, the `bond` method",
                    " should be called. If there are still pledged Ring or Kton and user want to bond more",
                    " values, the `bond_extra` method should be called.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Limited but potentially exploitable complexity.",
                    " - Contains a limited number of reads.",
                    " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                    "   will cause a new entry to be inserted into a vector (`StakingLock.unbondings`) kept in storage.",
                    " - One DB entry.",
                    " ----------",
                    " Weight: O(1)",
                    " DB Weight:",
                    " - Read: EraElectionStatus, Ledger, CurrentEra, Locks, BalanceOf Stash,",
                    " - Write: Locks, Ledger, BalanceOf Stash,",
                    " </weight>",
                ],
            },
            FunctionMetadata {
                name: "claim_mature_deposits",
                arguments: [],
                documentation: [
                    " Stash accounts can get their ring back after the depositing time exceeded,",
                    " and the ring getting back is still in staking status.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - One storage read.",
                    " - One storage write.",
                    " - Writes are limited to the `origin` account key.",
                    " ----------",
                    " DB Weight:",
                    " - Read: Ledger, [Origin Account]",
                    " - Write: [Origin Account], Ledger",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "try_claim_deposits_with_punish",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "expire_time",
                        ty: "TsInMs",
                    },
                ],
                documentation: [
                    " Claim deposits while the depositing time has not been exceeded, the ring",
                    " will not be slashed, but the account is required to pay KTON as punish.",
                    "",
                    " Refer to https://talk.darwinia.network/topics/55",
                    "",
                    " Assume the `expire_time` is a unique ID for the deposit",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - One storage read.",
                    " - One storage write.",
                    " - Writes are limited to the `origin` account key.",
                    " ----------",
                    " DB Weight:",
                    " - Read: Ledger, Locks, [Origin Account]",
                    " - Write: [Origin Account], Locks, Ledger",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "validate",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "prefs",
                        ty: "ValidatorPrefs",
                    },
                ],
                documentation: [
                    " Declare the desire to validate for the origin controller.",
                    "",
                    " Effects will be felt at the beginning of the next era.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - Contains a limited number of reads.",
                    " - Writes are limited to the `origin` account key.",
                    " -----------",
                    " Weight: O(1)",
                    " DB Weight:",
                    " - Read: Era Election Status, Ledger",
                    " - Write: Nominators, Validators",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "nominate",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "targets",
                        ty: "Vec<<T::Lookup as StaticLookup>::Source>",
                    },
                ],
                documentation: [
                    " Declare the desire to nominate `targets` for the origin controller.",
                    "",
                    " Effects will be felt at the beginning of the next era. This can only be called when",
                    " [`EraElectionStatus`] is `Closed`.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                    "",
                    " # <weight>",
                    " - The transaction\'s complexity is proportional to the size of `targets` (N)",
                    " which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                    " - Both the reads and writes follow a similar pattern.",
                    " ---------",
                    " Weight: O(N)",
                    " where N is the number of targets",
                    " DB Weight:",
                    " - Reads: Era Election Status, Ledger, Current Era",
                    " - Writes: Validators, Nominators",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "chill",
                arguments: [],
                documentation: [
                    " Declare no desire to either validate or nominate.",
                    "",
                    " Effects will be felt at the beginning of the next era.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - Contains one read.",
                    " - Writes are limited to the `origin` account key.",
                    " --------",
                    " Weight: O(1)",
                    " DB Weight:",
                    " - Read: EraElectionStatus, Ledger",
                    " - Write: Validators, Nominators",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_payee",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "payee",
                        ty: "RewardDestination<T::AccountId>",
                    },
                ],
                documentation: [
                    " (Re-)set the payment target for a controller.",
                    "",
                    " Effects will be felt at the beginning of the next era.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - Contains a limited number of reads.",
                    " - Writes are limited to the `origin` account key.",
                    " ---------",
                    " - Weight: O(1)",
                    " - DB Weight:",
                    "     - Read: Ledger",
                    "     - Write: Payee",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_controller",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "controller",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " (Re-)set the controller of a stash.",
                    "",
                    " Effects will be felt at the beginning of the next era.",
                    "",
                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                    "",
                    " # <weight>",
                    " - Independent of the arguments. Insignificant complexity.",
                    " - Contains a limited number of reads.",
                    " - Writes are limited to the `origin` account key.",
                    " ----------",
                    " Weight: O(1)",
                    " DB Weight:",
                    " - Read: Bonded, Ledger New Controller, Ledger Old Controller",
                    " - Write: Bonded, Ledger New Controller, Ledger Old Controller",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_validator_count",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Sets the ideal number of validators.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " Weight: O(1)",
                    " Write: Validator Count",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "increase_validator_count",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "additional",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Increments the ideal number of validators.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " Same as [`set_validator_count`].",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "scale_validator_count",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "factor",
                        ty: "Percent",
                    },
                ],
                documentation: [
                    " Scale up the ideal number of validators by a factor.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " Same as [`set_validator_count`].",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_no_eras",
                arguments: [],
                documentation: [
                    " Force there to be no new eras indefinitely.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " - No arguments.",
                    " - Weight: O(1)",
                    " - Write: ForceEra",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_new_era",
                arguments: [],
                documentation: [
                    " Force there to be a new era at the end of the next session. After this, it will be",
                    " reset to normal (non-forced) behaviour.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " - No arguments.",
                    " - Weight: O(1)",
                    " - Write ForceEra",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_invulnerables",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "invulnerables",
                        ty: "Vec<T::AccountId>",
                    },
                ],
                documentation: [
                    " Set the validators who cannot be slashed (if any).",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " - O(V)",
                    " - Write: Invulnerables",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_unstake",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "stash",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "num_slashing_spans",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " Force a current staker to become completely unstaked, immediately.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " O(S) where S is the number of slashing spans to be removed",
                    " Reads: Bonded, Slashing Spans, Account, Locks",
                    " Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Account, Locks",
                    " Writes Each: SpanSlash * S",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_new_era_always",
                arguments: [],
                documentation: [
                    " Force there to be a new era at the end of sessions indefinitely.",
                    "",
                    " The dispatch origin must be Root.",
                    "",
                    " # <weight>",
                    " - Weight: O(1)",
                    " - Write: ForceEra",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "cancel_deferred_slash",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "era",
                        ty: "EraIndex",
                    },
                    FunctionArgumentMetadata {
                        name: "slash_indices",
                        ty: "Vec<u32>",
                    },
                ],
                documentation: [
                    " Cancel enactment of a deferred slash.",
                    "",
                    " Can be called by the `T::SlashCancelOrigin`.",
                    "",
                    " Parameters: era and indices of the slashes for that era to kill.",
                    "",
                    " # <weight>",
                    " Complexity: O(U + S)",
                    " with U unapplied slashes weighted with U=1000",
                    " and S is the number of slash indices to be canceled.",
                    " - Read: Unapplied Slashes",
                    " - Write: Unapplied Slashes",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "payout_stakers",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "validator_stash",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "era",
                        ty: "EraIndex",
                    },
                ],
                documentation: [
                    " Pay out all the stakers behind a single validator for a single era.",
                    "",
                    " - `validator_stash` is the stash account of the validator. Their nominators, up to",
                    "   `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                    " - `era` may be any era between `[current_era - history_depth; current_era]`.",
                    "",
                    " The origin of this call must be _Signed_. Any account can call this function, even if",
                    " it is not one of the stakers.",
                    "",
                    " This can only be called when [`EraElectionStatus`] is `Closed`.",
                    "",
                    " # <weight>",
                    " - Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                    " - Contains a limited number of reads and writes.",
                    " -----------",
                    " N is the Number of payouts for the validator (including the validator)",
                    " Weight:",
                    " - Reward Destination Staked: O(N)",
                    " - Reward Destination Controller (Creating): O(N)",
                    " DB Weight:",
                    " - Read: EraElectionStatus, CurrentEra, HistoryDepth, ErasValidatorReward,",
                    "         ErasStakersClipped, ErasRewardPoints, ErasValidatorPrefs (8 items)",
                    " - Read Each: Bonded, Ledger, Payee, Locks, System Account (5 items)",
                    " - Write Each: System Account, Locks, Ledger (3 items)",
                    "",
                    "   NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                    "   Paying even a dead controller is cheaper weight-wise. We don\'t do any refunds here.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_history_depth",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new_history_depth",
                        ty: "Compact<EraIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "_era_items_deleted",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Set `HistoryDepth` value. This function will delete any history information",
                    " when `HistoryDepth` is reduced.",
                    "",
                    " Parameters:",
                    " - `new_history_depth`: The new history depth you would like to set.",
                    " - `era_items_deleted`: The number of items that will be deleted by this dispatch.",
                    "    This should report all the storage items that will be deleted by clearing old",
                    "    era history. Needed to report an accurate weight for the dispatch. Trusted by",
                    "    `Root` to report an accurate number.",
                    "",
                    " Origin must be root.",
                    "",
                    " # <weight>",
                    " - E: Number of history depths removed, i.e. 10 -> 7 = 3",
                    " - Weight: O(E)",
                    " - DB Weight:",
                    "     - Reads: Current Era, History Depth",
                    "     - Writes: History Depth",
                    "     - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                    "     - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake, ErasStartSessionIndex",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "reap_stash",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "stash",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "num_slashing_spans",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " Remove all data structure concerning a staker/stash once its balance is zero.",
                    " This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                    " and the target `stash` must have no funds left.",
                    "",
                    " This can be called from any origin.",
                    "",
                    " - `stash`: The stash account to reap. Its balance must be zero.",
                    "",
                    " # <weight>",
                    " Complexity: O(S) where S is the number of slashing spans on the account.",
                    " DB Weight:",
                    " - Reads: Stash Account, Bonded, Slashing Spans, Locks",
                    " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Stash Account, Locks",
                    " - Writes Each: SpanSlash * S",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "submit_election_solution",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "winners",
                        ty: "Vec<ValidatorIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "compact",
                        ty: "CompactAssignments",
                    },
                    FunctionArgumentMetadata {
                        name: "score",
                        ty: "ElectionScore",
                    },
                    FunctionArgumentMetadata {
                        name: "era",
                        ty: "EraIndex",
                    },
                    FunctionArgumentMetadata {
                        name: "size",
                        ty: "ElectionSize",
                    },
                ],
                documentation: [
                    " Submit an election result to the chain. If the solution:",
                    "",
                    " 1. is valid.",
                    " 2. has a better score than a potentially existing solution on chain.",
                    "",
                    " then, it will be _put_ on chain.",
                    "",
                    " A solution consists of two pieces of data:",
                    "",
                    " 1. `winners`: a flat vector of all the winners of the round.",
                    " 2. `assignments`: the compact version of an assignment vector that encodes the edge",
                    "\tweights.",
                    "",
                    " Both of which may be computed using _phragmen_, or any other algorithm.",
                    "",
                    " Additionally, the submitter must provide:",
                    "",
                    " - The `score` that they claim their solution has.",
                    "",
                    " Both validators and nominators will be represented by indices in the solution. The",
                    " indices should respect the corresponding types ([`ValidatorIndex`] and",
                    " [`NominatorIndex`]). Moreover, they should be valid when used to index into",
                    " [`SnapshotValidators`] and [`SnapshotNominators`]. Any invalid index will cause the",
                    " solution to be rejected. These two storage items are set during the election window and",
                    " may be used to determine the indices.",
                    "",
                    " A solution is valid if:",
                    "",
                    " 0. It is submitted when [`EraElectionStatus`] is `Open`.",
                    " 1. Its claimed score is equal to the score computed on-chain.",
                    " 2. Presents the correct number of winners.",
                    " 3. All indexes must be value according to the snapshot vectors. All edge values must",
                    "\talso be correct and should not overflow the granularity of the ratio type (i.e. 256",
                    "\tor billion).",
                    " 4. For each edge, all targets are actually nominated by the voter.",
                    " 5. Has correct self-votes.",
                    "",
                    " A solutions score is consisted of 3 parameters:",
                    "",
                    " 1. `min { support.total }` for each support of a winner. This value should be maximized.",
                    " 2. `sum { support.total }` for each support of a winner. This value should be minimized.",
                    " 3. `sum { support.total^2 }` for each support of a winner. This value should be",
                    "\tminimized (to ensure less variance)",
                    "",
                    " # <weight>",
                    " The transaction is assumed to be the longest path, a better solution.",
                    "   - Initial solution is almost the same.",
                    "   - Worse solution is retraced in pre-dispatch-checks which sets its own weight.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "submit_election_solution_unsigned",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "winners",
                        ty: "Vec<ValidatorIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "compact",
                        ty: "CompactAssignments",
                    },
                    FunctionArgumentMetadata {
                        name: "score",
                        ty: "ElectionScore",
                    },
                    FunctionArgumentMetadata {
                        name: "era",
                        ty: "EraIndex",
                    },
                    FunctionArgumentMetadata {
                        name: "size",
                        ty: "ElectionSize",
                    },
                ],
                documentation: [
                    " Unsigned version of `submit_election_solution`.",
                    "",
                    " Note that this must pass the [`ValidateUnsigned`] check which only allows transactions",
                    " from the local node to be included. In other words, only the block author can include a",
                    " transaction in the block.",
                    "",
                    " # <weight>",
                    " See [`submit_election_solution`].",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "EraPayout",
                arguments: [
                    "EraIndex",
                    "RingBalance",
                    "RingBalance",
                ],
                documentation: [
                    " The era payout has been set; the first balance is the validator-payout; the second is",
                    " the remainder from the maximum amount of reward.",
                    " [era_index, validator_payout, remainder]",
                ],
            },
            EventMetadata {
                name: "Reward",
                arguments: [
                    "AccountId",
                    "RingBalance",
                ],
                documentation: [
                    " The staker has been rewarded by this amount. [stash, amount]",
                ],
            },
            EventMetadata {
                name: "Slash",
                arguments: [
                    "AccountId",
                    "RingBalance",
                    "KtonBalance",
                ],
                documentation: [
                    " One validator (and its nominators) has been slashed by the given amount.",
                    " [validator, amount, amount]",
                ],
            },
            EventMetadata {
                name: "OldSlashingReportDiscarded",
                arguments: [
                    "SessionIndex",
                ],
                documentation: [
                    " An old slashing report from a prior era was discarded because it could",
                    " not be processed. [session_index]",
                ],
            },
            EventMetadata {
                name: "StakingElection",
                arguments: [
                    "ElectionCompute",
                ],
                documentation: [
                    " A new set of stakers was elected with the given [compute].",
                ],
            },
            EventMetadata {
                name: "SolutionStored",
                arguments: [
                    "ElectionCompute",
                ],
                documentation: [
                    " A new solution for the upcoming election has been stored. [compute]",
                ],
            },
            EventMetadata {
                name: "BondRing",
                arguments: [
                    "RingBalance",
                    "TsInMs",
                    "TsInMs",
                ],
                documentation: [
                    " An account has bonded this amount. [amount, start, end]",
                    "",
                    " NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                    " it will not be emitted for staking rewards when they are added to stake.",
                ],
            },
            EventMetadata {
                name: "BondKton",
                arguments: [
                    "KtonBalance",
                ],
                documentation: [
                    " An account has bonded this amount. [amount, start, end]",
                    "",
                    " NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                    " it will not be emitted for staking rewards when they are added to stake.",
                ],
            },
            EventMetadata {
                name: "UnbondRing",
                arguments: [
                    "RingBalance",
                    "BlockNumber",
                ],
                documentation: [
                    " An account has unbonded this amount. [amount, now]",
                ],
            },
            EventMetadata {
                name: "UnbondKton",
                arguments: [
                    "KtonBalance",
                    "BlockNumber",
                ],
                documentation: [
                    " An account has unbonded this amount. [amount, now]",
                ],
            },
            EventMetadata {
                name: "ClaimDepositsWithPunish",
                arguments: [
                    "AccountId",
                    "KtonBalance",
                ],
                documentation: [
                    " Someone claimed his deposits with some *KTON*s punishment. [stash, forfeit]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                115,
                116,
                97,
                107,
                105,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "SessionsPerEra",
            ty: "SessionIndex",
            value: [
                6,
                0,
                0,
                0,
            ],
            documentation: [
                " Number of sessions per era.",
            ],
        },
        ModuleConstantMetadata {
            name: "BondingDurationInEra",
            ty: "EraIndex",
            value: [
                14,
                0,
                0,
                0,
            ],
            documentation: [
                " Number of eras that staked funds must remain bonded for.",
            ],
        },
        ModuleConstantMetadata {
            name: "BondingDurationInBlockNumber",
            ty: "T::BlockNumber",
            value: [
                128,
                19,
                3,
                0,
            ],
            documentation: [
                " Number of BlockNumbers that staked funds must remain bonded for.",
            ],
        },
        ModuleConstantMetadata {
            name: "SlashDeferDuration",
            ty: "EraIndex",
            value: [
                13,
                0,
                0,
                0,
            ],
            documentation: [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration.",
                " Set to 0 if slashes should be applied immediately, without opportunity for",
                " intervention.",
            ],
        },
        ModuleConstantMetadata {
            name: "ElectionLookahead",
            ty: "T::BlockNumber",
            value: [
                150,
                0,
                0,
                0,
            ],
            documentation: [
                " The number of blocks before the end of the era from which election submissions are allowed.",
                "",
                " Setting this to zero will disable the offchain compute and only on-chain seq-phragmen will",
                " be used.",
                "",
                " This is bounded by being within the last session. Hence, setting it to a value more than the",
                " length of a session will be pointless.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxIterations",
            ty: "u32",
            value: [
                5,
                0,
                0,
                0,
            ],
            documentation: [
                " Maximum number of balancing iterations to run in the offchain submission.",
                "",
                " If set to 0, balance_solution will not be executed at all.",
            ],
        },
        ModuleConstantMetadata {
            name: "MinSolutionScoreBump",
            ty: "Perbill",
            value: [
                32,
                161,
                7,
                0,
            ],
            documentation: [
                " The threshold of improvement that should be provided for a new solution to be accepted.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxNominatorRewardedPerValidator",
            ty: "u32",
            value: [
                64,
                0,
                0,
                0,
            ],
            documentation: [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can claim",
                " their reward. This used to limit the i/o cost for the nominator payout.",
            ],
        },
        ModuleConstantMetadata {
            name: "Cap",
            ty: "RingBalance<T>",
            value: [
                0,
                0,
                232,
                137,
                4,
                35,
                199,
                138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " Darwinia\'s hard cap default 10_000_000_000 * 10^9",
            ],
        },
        ModuleConstantMetadata {
            name: "TotalPower",
            ty: "Power",
            value: [
                0,
                202,
                154,
                59,
            ],
            documentation: [
                " Darwinia\'s staking vote default 1_000_000_000",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "NotController",
            documentation: [
                " Not a controller account.",
            ],
        },
        ErrorMetadata {
            name: "NotStash",
            documentation: [
                " Not a stash account.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyBonded",
            documentation: [
                " Stash is already bonded.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyPaired",
            documentation: [
                " Controller is already paired.",
            ],
        },
        ErrorMetadata {
            name: "EmptyTargets",
            documentation: [
                " Targets cannot be empty.",
            ],
        },
        ErrorMetadata {
            name: "DuplicateIndex",
            documentation: [
                " Duplicate index.",
            ],
        },
        ErrorMetadata {
            name: "InvalidSlashIndex",
            documentation: [
                " Slash record index out of bounds.",
            ],
        },
        ErrorMetadata {
            name: "InsufficientValue",
            documentation: [
                " Can not bond with value less than minimum balance.",
            ],
        },
        ErrorMetadata {
            name: "NoMoreChunks",
            documentation: [
                " Can not schedule more unlock chunks.",
            ],
        },
        ErrorMetadata {
            name: "FundedTarget",
            documentation: [
                " Attempting to target a stash that still has funds.",
            ],
        },
        ErrorMetadata {
            name: "InvalidEraToReward",
            documentation: [
                " Invalid era to reward.",
            ],
        },
        ErrorMetadata {
            name: "InvalidNumberOfNominations",
            documentation: [
                " Invalid number of nominations.",
            ],
        },
        ErrorMetadata {
            name: "NotSortedAndUnique",
            documentation: [
                " Items are not sorted and unique.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyClaimed",
            documentation: [
                " Rewards for this era have already been claimed for this validator.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionEarlySubmission",
            documentation: [
                " The submitted result is received out of the open window.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionWeakSubmission",
            documentation: [
                " The submitted result is not as good as the one stored on chain.",
            ],
        },
        ErrorMetadata {
            name: "SnapshotUnavailable",
            documentation: [
                " The snapshot data of the current window is missing.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusWinnerCount",
            documentation: [
                " Incorrect number of winners were presented.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusWinner",
            documentation: [
                " One of the submitted winners is not an active candidate on chain (index is out of range",
                " in snapshot).",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusCompact",
            documentation: [
                " Error while building the assignment type from the compact. This can happen if an index",
                " is invalid, or if the weights _overflow_.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusNominator",
            documentation: [
                " One of the submitted nominators is not an active nominator on chain.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusNomination",
            documentation: [
                " One of the submitted nominators has an edge to which they have not voted on chain.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionSlashedNomination",
            documentation: [
                " One of the submitted nominators has an edge which is submitted before the last non-zero",
                " slash of the target.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusSelfVote",
            documentation: [
                " A self vote must only be originated from a validator to ONLY themselves.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusEdge",
            documentation: [
                " The submitted result has unknown edges that are not among the presented winners.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusScore",
            documentation: [
                " The claimed score does not match with the one computed from the data.",
            ],
        },
        ErrorMetadata {
            name: "OffchainElectionBogusElectionSize",
            documentation: [
                " The election size is invalid.",
            ],
        },
        ErrorMetadata {
            name: "CallNotAllowed",
            documentation: [
                " The call is not allowed at the given time due to restrictions of election period.",
            ],
        },
        ErrorMetadata {
            name: "IncorrectHistoryDepth",
            documentation: [
                " Incorrect previous history depth input provided.",
            ],
        },
        ErrorMetadata {
            name: "IncorrectSlashingSpans",
            documentation: [
                " Incorrect number of slashing spans provided.",
            ],
        },
        ErrorMetadata {
            name: "PayoutIns",
            documentation: [
                " Payout - INSUFFICIENT",
            ],
        },
    ],
    index: 8,
}
 2020-11-21T11:59:29.365Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Offences",
    storage: Some(
        StorageMetadata {
            prefix: "Offences",
            entries: [
                StorageEntryMetadata {
                    name: "Reports",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "ReportIdOf<T>",
                        value: "OffenceDetails<T::AccountId, T::IdentificationTuple>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The primary structure that holds all offence records keyed by report identifiers.",
                    ],
                },
                StorageEntryMetadata {
                    name: "DeferredOffences",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<DeferredOffenceOf<T>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Deferred reports that have been rejected by the offence handler and need to be submitted",
                        " at a later time.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ConcurrentReportsIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "Kind",
                        key2: "OpaqueTimeSlot",
                        value: "Vec<ReportIdOf<T>>",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " A vector of reports of the same kind that happened at the same time slot.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ReportsByKindIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "Kind",
                        value: "Vec<u8>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Enumerates all reports of a kind along with the time they happened.",
                        "",
                        " All reports are sorted by the time of offence.",
                        "",
                        " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                        " different types are not supported at the moment so we are doing the manual serialization.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Offence",
                arguments: [
                    "Kind",
                    "OpaqueTimeSlot",
                    "bool",
                ],
                documentation: [
                    " There is an offence reported of the given `kind` happened at the `session_index` and",
                    " (kind-specific) time slot. This event is not deposited for duplicate slashes. last",
                    " element indicates of the offence was applied (true) or queued (false)",
                    " \\[kind, timeslot, applied\\].",
                ],
            },
        ],
    ),
    constants: [],
    errors: [],
    index: 9,
}
 2020-11-21T11:59:29.365Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Historical",
    storage: None,
    calls: None,
    event: None,
    constants: [],
    errors: [],
    index: 10,
}
 2020-11-21T11:59:29.365Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Session",
    storage: Some(
        StorageMetadata {
            prefix: "Session",
            entries: [
                StorageEntryMetadata {
                    name: "Validators",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::ValidatorId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current set of validators.",
                    ],
                },
                StorageEntryMetadata {
                    name: "CurrentIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "SessionIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current index of the session.",
                    ],
                },
                StorageEntryMetadata {
                    name: "QueuedChanged",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " True if the underlying economic identities or weighting behind the validators",
                        " has changed in the queued validator set.",
                    ],
                },
                StorageEntryMetadata {
                    name: "QueuedKeys",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::ValidatorId, T::Keys)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The queued keys for the next session. When the next session begins, these keys",
                        " will be used to determine the validator\'s session keys.",
                    ],
                },
                StorageEntryMetadata {
                    name: "DisabledValidators",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<u32>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Indices of disabled validators.",
                        "",
                        " The set is cleared when `on_session_ending` returns a new set of identities.",
                    ],
                },
                StorageEntryMetadata {
                    name: "NextKeys",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::ValidatorId",
                        value: "T::Keys",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The next session keys for a validator.",
                    ],
                },
                StorageEntryMetadata {
                    name: "KeyOwner",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "(KeyTypeId, Vec<u8>)",
                        value: "T::ValidatorId",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The owner of a key. The key is the `KeyTypeId` + the encoded key.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "set_keys",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "keys",
                        ty: "T::Keys",
                    },
                    FunctionArgumentMetadata {
                        name: "proof",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Sets the session key(s) of the function caller to `keys`.",
                    " Allows an account to set its session key prior to becoming a validator.",
                    " This doesn\'t take effect until the next session.",
                    "",
                    " The dispatch origin of this function must be signed.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(1)`",
                    "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                    " - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                    " - DbWrites: `origin account`, `NextKeys`",
                    " - DbReads per key id: `KeyOwner`",
                    " - DbWrites per key id: `KeyOwner`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "purge_keys",
                arguments: [],
                documentation: [
                    " Removes any session key(s) of the function caller.",
                    " This doesn\'t take effect until the next session.",
                    "",
                    " The dispatch origin of this function must be signed.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(1)` in number of key types.",
                    "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                    " - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                    " - DbWrites: `NextKeys`, `origin account`",
                    " - DbWrites per key id: `KeyOwnder`",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "NewSession",
                arguments: [
                    "SessionIndex",
                ],
                documentation: [
                    " New session has happened. Note that the argument is the \\[session_index\\], not the block",
                    " number as the type might suggest.",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "InvalidProof",
            documentation: [
                " Invalid ownership proof.",
            ],
        },
        ErrorMetadata {
            name: "NoAssociatedValidatorId",
            documentation: [
                " No associated validator ID for account.",
            ],
        },
        ErrorMetadata {
            name: "DuplicatedKey",
            documentation: [
                " Registered duplicate key.",
            ],
        },
        ErrorMetadata {
            name: "NoKeys",
            documentation: [
                " No keys are associated with this account.",
            ],
        },
    ],
    index: 11,
}
 2020-11-21T11:59:29.365Z TRACE substrater::darwinia > ModuleMetadata {
    name: "FinalityTracker",
    storage: Some(
        StorageMetadata {
            prefix: "FinalityTracker",
            entries: [
                StorageEntryMetadata {
                    name: "RecentHints",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Recent hints.",
                    ],
                },
                StorageEntryMetadata {
                    name: "OrderedHints",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Ordered recent hints.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Median",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The median.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Update",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Final hint to apply in the block. `None` means \"same as parent\".",
                    ],
                },
                StorageEntryMetadata {
                    name: "Initialized",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "final_hint",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "hint",
                        ty: "Compact<T::BlockNumber>",
                    },
                ],
                documentation: [
                    " Hint that the author of this block thinks the best finalized",
                    " block is the given number.",
                ],
            },
        ],
    ),
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "WindowSize",
            ty: "T::BlockNumber",
            value: [
                101,
                0,
                0,
                0,
            ],
            documentation: [
                " The number of recent samples to keep from this chain. Default is 101.",
            ],
        },
        ModuleConstantMetadata {
            name: "ReportLatency",
            ty: "T::BlockNumber",
            value: [
                232,
                3,
                0,
                0,
            ],
            documentation: [
                " The delay after which point things become suspicious. Default is 1000.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "AlreadyUpdated",
            documentation: [
                " Final hint must be updated only once in the block",
            ],
        },
        ErrorMetadata {
            name: "BadHint",
            documentation: [
                " Finalized height above block number",
            ],
        },
    ],
    index: 12,
}
 2020-11-21T11:59:29.365Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Grandpa",
    storage: Some(
        StorageMetadata {
            prefix: "GrandpaFinality",
            entries: [
                StorageEntryMetadata {
                    name: "State",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "StoredState<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " State of the current authority set.",
                    ],
                },
                StorageEntryMetadata {
                    name: "PendingChange",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "StoredPendingChange<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Pending change: (signaled at, scheduled change).",
                    ],
                },
                StorageEntryMetadata {
                    name: "NextForced",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " next block number where we can force a change.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Stalled",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "(T::BlockNumber, T::BlockNumber)",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " `true` if we are currently stalled.",
                    ],
                },
                StorageEntryMetadata {
                    name: "CurrentSetId",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "SetId",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of changes (both in terms of keys and underlying economic responsibilities)",
                        " in the \"set\" of Grandpa validators from genesis.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SetIdSession",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "SetId",
                        value: "SessionIndex",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                        " members were responsible.",
                        "",
                        " TWOX-NOTE: `SetId` is not under user control.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "report_equivocation",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "equivocation_proof",
                        ty: "EquivocationProof<T::Hash, T::BlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "key_owner_proof",
                        ty: "T::KeyOwnerProof",
                    },
                ],
                documentation: [
                    " Report voter equivocation/misbehavior. This method will verify the",
                    " equivocation proof and validate the given key ownership proof",
                    " against the extracted offender. If both are valid, the offence",
                    " will be reported.",
                ],
            },
            FunctionMetadata {
                name: "report_equivocation_unsigned",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "equivocation_proof",
                        ty: "EquivocationProof<T::Hash, T::BlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "key_owner_proof",
                        ty: "T::KeyOwnerProof",
                    },
                ],
                documentation: [
                    " Report voter equivocation/misbehavior. This method will verify the",
                    " equivocation proof and validate the given key ownership proof",
                    " against the extracted offender. If both are valid, the offence",
                    " will be reported.",
                    "",
                    " This extrinsic must be called unsigned and it is expected that only",
                    " block authors will call it (validated in `ValidateUnsigned`), as such",
                    " if the block author is defined it will be defined as the equivocation",
                    " reporter.",
                ],
            },
            FunctionMetadata {
                name: "note_stalled",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "delay",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "best_finalized_block_number",
                        ty: "T::BlockNumber",
                    },
                ],
                documentation: [
                    " Note that the current authority set of the GRANDPA finality gadget has",
                    " stalled. This will trigger a forced authority set change at the beginning",
                    " of the next session, to be enacted `delay` blocks after that. The delay",
                    " should be high enough to safely assume that the block signalling the",
                    " forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                    " will start the new authority set using the given finalized block as base.",
                    " Only callable by root.",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "NewAuthorities",
                arguments: [
                    "AuthorityList",
                ],
                documentation: [
                    " New authority set has been applied. \\[authority_set\\]",
                ],
            },
            EventMetadata {
                name: "Paused",
                arguments: [],
                documentation: [
                    " Current authority set has been paused.",
                ],
            },
            EventMetadata {
                name: "Resumed",
                arguments: [],
                documentation: [
                    " Current authority set has been resumed.",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "PauseFailed",
            documentation: [
                " Attempt to signal GRANDPA pause when the authority set isn\'t live",
                " (either paused or already pending pause).",
            ],
        },
        ErrorMetadata {
            name: "ResumeFailed",
            documentation: [
                " Attempt to signal GRANDPA resume when the authority set isn\'t paused",
                " (either live or already pending resume).",
            ],
        },
        ErrorMetadata {
            name: "ChangePending",
            documentation: [
                " Attempt to signal GRANDPA change with one already pending.",
            ],
        },
        ErrorMetadata {
            name: "TooSoon",
            documentation: [
                " Cannot signal forced change so soon after last.",
            ],
        },
        ErrorMetadata {
            name: "InvalidKeyOwnershipProof",
            documentation: [
                " A key ownership proof provided as part of an equivocation report is invalid.",
            ],
        },
        ErrorMetadata {
            name: "InvalidEquivocationProof",
            documentation: [
                " An equivocation proof provided as part of an equivocation report is invalid.",
            ],
        },
        ErrorMetadata {
            name: "DuplicateOffenceReport",
            documentation: [
                " A given equivocation report is valid but already previously reported.",
            ],
        },
    ],
    index: 13,
}
 2020-11-21T11:59:29.366Z TRACE substrater::darwinia > ModuleMetadata {
    name: "ImOnline",
    storage: Some(
        StorageMetadata {
            prefix: "ImOnline",
            entries: [
                StorageEntryMetadata {
                    name: "HeartbeatAfter",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The block number after which it\'s ok to send heartbeats in current session.",
                        "",
                        " At the beginning of each session we set this to a value that should",
                        " fall roughly in the middle of the session duration.",
                        " The idea is to first wait for the validators to produce a block",
                        " in the current session, so that the heartbeat later on will not be necessary.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Keys",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AuthorityId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current set of keys that may issue a heartbeat.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ReceivedHeartbeats",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "SessionIndex",
                        key2: "AuthIndex",
                        value: "Vec<u8>",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " For each session index, we keep a mapping of `AuthIndex` to",
                        " `offchain::OpaqueNetworkState`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "AuthoredBlocks",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "SessionIndex",
                        key2: "T::ValidatorId",
                        value: "u32",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " For each session index, we keep a mapping of `T::ValidatorId` to the",
                        " number of blocks authored by the given authority.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "heartbeat",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "heartbeat",
                        ty: "Heartbeat<T::BlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "_signature",
                        ty: "<T::AuthorityId as RuntimeAppPublic>::Signature",
                    },
                ],
                documentation: [
                    " # <weight>",
                    " - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len)",
                    "   and E is length of `heartbeat.network_state.external_address`",
                    "   - `O(K)`: decoding of length `K`",
                    "   - `O(E)`: decoding/encoding of length `E`",
                    " - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                    "   `ReceivedHeartbeats`",
                    " - DbWrites: `ReceivedHeartbeats`",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "HeartbeatReceived",
                arguments: [
                    "AuthorityId",
                ],
                documentation: [
                    " A new heartbeat was received from `AuthorityId` \\[authority_id\\]",
                ],
            },
            EventMetadata {
                name: "AllGood",
                arguments: [],
                documentation: [
                    " At the end of the session, no offence was committed.",
                ],
            },
            EventMetadata {
                name: "SomeOffline",
                arguments: [
                    "Vec<IdentificationTuple>",
                ],
                documentation: [
                    " At the end of the session, at least one validator was found to be \\[offline\\].",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "InvalidKey",
            documentation: [
                " Non existent public key.",
            ],
        },
        ErrorMetadata {
            name: "DuplicatedHeartbeat",
            documentation: [
                " Duplicated heartbeat.",
            ],
        },
    ],
    index: 14,
}
 2020-11-21T11:59:29.369Z TRACE substrater::darwinia > ModuleMetadata {
    name: "AuthorityDiscovery",
    storage: None,
    calls: Some(
        [],
    ),
    event: None,
    constants: [],
    errors: [],
    index: 15,
}
 2020-11-21T11:59:29.369Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Council",
    storage: Some(
        StorageMetadata {
            prefix: "Instance0Collective",
            entries: [
                StorageEntryMetadata {
                    name: "Proposals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::Hash>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The hashes of the active proposals.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ProposalOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "T::Hash",
                        value: "<T as Trait<I>>::Proposal",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Actual proposal for a given hash, if it\'s current.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Voting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "T::Hash",
                        value: "Votes<T::AccountId, T::BlockNumber>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Votes on a given proposal, if it is ongoing.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ProposalCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Proposals so far.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current members of the collective. This is stored sorted (just by value).",
                    ],
                },
                StorageEntryMetadata {
                    name: "Prime",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The prime member that helps determine the default vote behavior in case of absentations.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "set_members",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new_members",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "prime",
                        ty: "Option<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "old_count",
                        ty: "MemberCount",
                    },
                ],
                documentation: [
                    " Set the collective\'s membership.",
                    "",
                    " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    " - `prime`: The prime member whose vote sets the default.",
                    " - `old_count`: The upper bound for the previous number of members in storage.",
                    "                Used for weight estimation.",
                    "",
                    " Requires root origin.",
                    "",
                    " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "       the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(MP + N)` where:",
                    "   - `M` old-members-count (code- and governance-bounded)",
                    "   - `N` new-members-count (code- and governance-bounded)",
                    "   - `P` proposals-count (code-bounded)",
                    " - DB:",
                    "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                    "   - 1 storage read (codec `O(P)`) for reading the proposals",
                    "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                    "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "execute",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal",
                        ty: "Box<<T as Trait<I>>::Proposal>",
                    },
                    FunctionArgumentMetadata {
                        name: "length_bound",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    " Origin must be a member of the collective.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                    " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                    " - 1 event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "propose",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "threshold",
                        ty: "Compact<MemberCount>",
                    },
                    FunctionArgumentMetadata {
                        name: "proposal",
                        ty: "Box<<T as Trait<I>>::Proposal>",
                    },
                    FunctionArgumentMetadata {
                        name: "length_bound",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Add a new proposal to either be voted on or executed directly.",
                    "",
                    " Requires the sender to be member.",
                    "",
                    " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    " or put up for voting.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "   - `M` is members-count (code- and governance-bounded)",
                    "   - branching is influenced by `threshold` where:",
                    "     - `P1` is proposal execution complexity (`threshold < 2`)",
                    "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                    " - DB:",
                    "   - 1 storage read `is_member` (codec `O(M)`)",
                    "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                    "   - DB accesses influenced by `threshold`:",
                    "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                    "     - OR proposal insertion (`threshold <= 2`)",
                    "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                    "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                    "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                    "       - 1 storage write `Voting` (codec `O(M)`)",
                    "   - 1 event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vote",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal",
                        ty: "T::Hash",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<ProposalIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "approve",
                        ty: "bool",
                    },
                ],
                documentation: [
                    " Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    " Requires the sender to be a member.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                    " - DB:",
                    "   - 1 storage read `Members` (codec `O(M)`)",
                    "   - 1 storage mutation `Voting` (codec `O(M)`)",
                    " - 1 event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "close",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal_hash",
                        ty: "T::Hash",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<ProposalIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "proposal_weight_bound",
                        ty: "Compact<Weight>",
                    },
                    FunctionArgumentMetadata {
                        name: "length_bound",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    " May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    " If called before the end of the voting period it will only close the vote if it is",
                    " has enough votes to be approved or disapproved.",
                    "",
                    " If called after the end of the voting period abstentions are counted as rejections",
                    " unless there is a prime member set and the prime member cast an approval.",
                    "",
                    " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                    " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(B + M + P1 + P2)` where:",
                    "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "   - `M` is members-count (code- and governance-bounded)",
                    "   - `P1` is the complexity of `proposal` preimage.",
                    "   - `P2` is proposal-count (code-bounded)",
                    " - DB:",
                    "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                    "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                    "  - any mutations done while executing `proposal` (`P1`)",
                    " - up to 3 events",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "disapprove_proposal",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal_hash",
                        ty: "T::Hash",
                    },
                ],
                documentation: [
                    " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                    "",
                    " Must be called by the Root origin.",
                    "",
                    " Parameters:",
                    " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    " # <weight>",
                    " Complexity: O(P) where P is the number of max proposals",
                    " DB Weight:",
                    " * Reads: Proposals",
                    " * Writes: Voting, Proposals, ProposalOf",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Proposed",
                arguments: [
                    "AccountId",
                    "ProposalIndex",
                    "Hash",
                    "MemberCount",
                ],
                documentation: [
                    " A motion (given hash) has been proposed (by given account) with a threshold (given",
                    " `MemberCount`).",
                    " \\[account, proposal_index, proposal_hash, threshold\\]",
                ],
            },
            EventMetadata {
                name: "Voted",
                arguments: [
                    "AccountId",
                    "Hash",
                    "bool",
                    "MemberCount",
                    "MemberCount",
                ],
                documentation: [
                    " A motion (given hash) has been voted on by given account, leaving",
                    " a tally (yes votes and no votes given respectively as `MemberCount`).",
                    " \\[account, proposal_hash, voted, yes, no\\]",
                ],
            },
            EventMetadata {
                name: "Approved",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A motion was approved by the required threshold.",
                    " \\[proposal_hash\\]",
                ],
            },
            EventMetadata {
                name: "Disapproved",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A motion was not approved by the required threshold.",
                    " \\[proposal_hash\\]",
                ],
            },
            EventMetadata {
                name: "Executed",
                arguments: [
                    "Hash",
                    "DispatchResult",
                ],
                documentation: [
                    " A motion was executed; result will be `Ok` if it returned without error.",
                    " \\[proposal_hash, result\\]",
                ],
            },
            EventMetadata {
                name: "MemberExecuted",
                arguments: [
                    "Hash",
                    "DispatchResult",
                ],
                documentation: [
                    " A single member did some action; result will be `Ok` if it returned without error.",
                    " \\[proposal_hash, result\\]",
                ],
            },
            EventMetadata {
                name: "Closed",
                arguments: [
                    "Hash",
                    "MemberCount",
                    "MemberCount",
                ],
                documentation: [
                    " A proposal was closed because its threshold was reached or after its duration was up.",
                    " \\[proposal_hash, yes, no\\]",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "NotMember",
            documentation: [
                " Account is not a member",
            ],
        },
        ErrorMetadata {
            name: "DuplicateProposal",
            documentation: [
                " Duplicate proposals not allowed",
            ],
        },
        ErrorMetadata {
            name: "ProposalMissing",
            documentation: [
                " Proposal must exist",
            ],
        },
        ErrorMetadata {
            name: "WrongIndex",
            documentation: [
                " Mismatched index",
            ],
        },
        ErrorMetadata {
            name: "DuplicateVote",
            documentation: [
                " Duplicate vote ignored",
            ],
        },
        ErrorMetadata {
            name: "AlreadyInitialized",
            documentation: [
                " Members are already initialized!",
            ],
        },
        ErrorMetadata {
            name: "TooEarly",
            documentation: [
                " The close call was made too early, before the end of the voting.",
            ],
        },
        ErrorMetadata {
            name: "TooManyProposals",
            documentation: [
                " There can only be a maximum of `MaxProposals` active proposals.",
            ],
        },
        ErrorMetadata {
            name: "WrongProposalWeight",
            documentation: [
                " The given weight bound for the proposal was too low.",
            ],
        },
        ErrorMetadata {
            name: "WrongProposalLength",
            documentation: [
                " The given length bound for the proposal was too low.",
            ],
        },
    ],
    index: 16,
}
 2020-11-21T11:59:29.391Z TRACE substrater::darwinia > ModuleMetadata {
    name: "TechnicalCommittee",
    storage: Some(
        StorageMetadata {
            prefix: "Instance1Collective",
            entries: [
                StorageEntryMetadata {
                    name: "Proposals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::Hash>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The hashes of the active proposals.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ProposalOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "T::Hash",
                        value: "<T as Trait<I>>::Proposal",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Actual proposal for a given hash, if it\'s current.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Voting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "T::Hash",
                        value: "Votes<T::AccountId, T::BlockNumber>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Votes on a given proposal, if it is ongoing.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ProposalCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Proposals so far.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current members of the collective. This is stored sorted (just by value).",
                    ],
                },
                StorageEntryMetadata {
                    name: "Prime",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The prime member that helps determine the default vote behavior in case of absentations.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "set_members",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new_members",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "prime",
                        ty: "Option<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "old_count",
                        ty: "MemberCount",
                    },
                ],
                documentation: [
                    " Set the collective\'s membership.",
                    "",
                    " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    " - `prime`: The prime member whose vote sets the default.",
                    " - `old_count`: The upper bound for the previous number of members in storage.",
                    "                Used for weight estimation.",
                    "",
                    " Requires root origin.",
                    "",
                    " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "       the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(MP + N)` where:",
                    "   - `M` old-members-count (code- and governance-bounded)",
                    "   - `N` new-members-count (code- and governance-bounded)",
                    "   - `P` proposals-count (code-bounded)",
                    " - DB:",
                    "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                    "   - 1 storage read (codec `O(P)`) for reading the proposals",
                    "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                    "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "execute",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal",
                        ty: "Box<<T as Trait<I>>::Proposal>",
                    },
                    FunctionArgumentMetadata {
                        name: "length_bound",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    " Origin must be a member of the collective.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                    " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                    " - 1 event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "propose",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "threshold",
                        ty: "Compact<MemberCount>",
                    },
                    FunctionArgumentMetadata {
                        name: "proposal",
                        ty: "Box<<T as Trait<I>>::Proposal>",
                    },
                    FunctionArgumentMetadata {
                        name: "length_bound",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Add a new proposal to either be voted on or executed directly.",
                    "",
                    " Requires the sender to be member.",
                    "",
                    " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    " or put up for voting.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "   - `M` is members-count (code- and governance-bounded)",
                    "   - branching is influenced by `threshold` where:",
                    "     - `P1` is proposal execution complexity (`threshold < 2`)",
                    "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                    " - DB:",
                    "   - 1 storage read `is_member` (codec `O(M)`)",
                    "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                    "   - DB accesses influenced by `threshold`:",
                    "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                    "     - OR proposal insertion (`threshold <= 2`)",
                    "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                    "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                    "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                    "       - 1 storage write `Voting` (codec `O(M)`)",
                    "   - 1 event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vote",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal",
                        ty: "T::Hash",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<ProposalIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "approve",
                        ty: "bool",
                    },
                ],
                documentation: [
                    " Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    " Requires the sender to be a member.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                    " - DB:",
                    "   - 1 storage read `Members` (codec `O(M)`)",
                    "   - 1 storage mutation `Voting` (codec `O(M)`)",
                    " - 1 event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "close",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal_hash",
                        ty: "T::Hash",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<ProposalIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "proposal_weight_bound",
                        ty: "Compact<Weight>",
                    },
                    FunctionArgumentMetadata {
                        name: "length_bound",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    " May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    " If called before the end of the voting period it will only close the vote if it is",
                    " has enough votes to be approved or disapproved.",
                    "",
                    " If called after the end of the voting period abstentions are counted as rejections",
                    " unless there is a prime member set and the prime member cast an approval.",
                    "",
                    " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                    " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    " # <weight>",
                    " ## Weight",
                    " - `O(B + M + P1 + P2)` where:",
                    "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "   - `M` is members-count (code- and governance-bounded)",
                    "   - `P1` is the complexity of `proposal` preimage.",
                    "   - `P2` is proposal-count (code-bounded)",
                    " - DB:",
                    "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                    "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                    "  - any mutations done while executing `proposal` (`P1`)",
                    " - up to 3 events",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "disapprove_proposal",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal_hash",
                        ty: "T::Hash",
                    },
                ],
                documentation: [
                    " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                    "",
                    " Must be called by the Root origin.",
                    "",
                    " Parameters:",
                    " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    " # <weight>",
                    " Complexity: O(P) where P is the number of max proposals",
                    " DB Weight:",
                    " * Reads: Proposals",
                    " * Writes: Voting, Proposals, ProposalOf",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Proposed",
                arguments: [
                    "AccountId",
                    "ProposalIndex",
                    "Hash",
                    "MemberCount",
                ],
                documentation: [
                    " A motion (given hash) has been proposed (by given account) with a threshold (given",
                    " `MemberCount`).",
                    " \\[account, proposal_index, proposal_hash, threshold\\]",
                ],
            },
            EventMetadata {
                name: "Voted",
                arguments: [
                    "AccountId",
                    "Hash",
                    "bool",
                    "MemberCount",
                    "MemberCount",
                ],
                documentation: [
                    " A motion (given hash) has been voted on by given account, leaving",
                    " a tally (yes votes and no votes given respectively as `MemberCount`).",
                    " \\[account, proposal_hash, voted, yes, no\\]",
                ],
            },
            EventMetadata {
                name: "Approved",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A motion was approved by the required threshold.",
                    " \\[proposal_hash\\]",
                ],
            },
            EventMetadata {
                name: "Disapproved",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A motion was not approved by the required threshold.",
                    " \\[proposal_hash\\]",
                ],
            },
            EventMetadata {
                name: "Executed",
                arguments: [
                    "Hash",
                    "DispatchResult",
                ],
                documentation: [
                    " A motion was executed; result will be `Ok` if it returned without error.",
                    " \\[proposal_hash, result\\]",
                ],
            },
            EventMetadata {
                name: "MemberExecuted",
                arguments: [
                    "Hash",
                    "DispatchResult",
                ],
                documentation: [
                    " A single member did some action; result will be `Ok` if it returned without error.",
                    " \\[proposal_hash, result\\]",
                ],
            },
            EventMetadata {
                name: "Closed",
                arguments: [
                    "Hash",
                    "MemberCount",
                    "MemberCount",
                ],
                documentation: [
                    " A proposal was closed because its threshold was reached or after its duration was up.",
                    " \\[proposal_hash, yes, no\\]",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "NotMember",
            documentation: [
                " Account is not a member",
            ],
        },
        ErrorMetadata {
            name: "DuplicateProposal",
            documentation: [
                " Duplicate proposals not allowed",
            ],
        },
        ErrorMetadata {
            name: "ProposalMissing",
            documentation: [
                " Proposal must exist",
            ],
        },
        ErrorMetadata {
            name: "WrongIndex",
            documentation: [
                " Mismatched index",
            ],
        },
        ErrorMetadata {
            name: "DuplicateVote",
            documentation: [
                " Duplicate vote ignored",
            ],
        },
        ErrorMetadata {
            name: "AlreadyInitialized",
            documentation: [
                " Members are already initialized!",
            ],
        },
        ErrorMetadata {
            name: "TooEarly",
            documentation: [
                " The close call was made too early, before the end of the voting.",
            ],
        },
        ErrorMetadata {
            name: "TooManyProposals",
            documentation: [
                " There can only be a maximum of `MaxProposals` active proposals.",
            ],
        },
        ErrorMetadata {
            name: "WrongProposalWeight",
            documentation: [
                " The given weight bound for the proposal was too low.",
            ],
        },
        ErrorMetadata {
            name: "WrongProposalLength",
            documentation: [
                " The given length bound for the proposal was too low.",
            ],
        },
    ],
    index: 17,
}
 2020-11-21T11:59:29.397Z TRACE substrater::darwinia > ModuleMetadata {
    name: "ElectionsPhragmen",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaPhragmenElection",
            entries: [
                StorageEntryMetadata {
                    name: "Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::AccountId, BalanceOf<T>)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current elected membership. Sorted based on account id.",
                    ],
                },
                StorageEntryMetadata {
                    name: "RunnersUp",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::AccountId, BalanceOf<T>)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current runners_up. Sorted based on low to high merit (worse to best).",
                    ],
                },
                StorageEntryMetadata {
                    name: "ElectionRounds",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total number of vote rounds that have happened, excluding the upcoming one.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Voting",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Votes and locked stake of a particular voter.",
                        "",
                        " TWOX-NOTE: SAFE as `AccountId` is a crypto hash",
                    ],
                },
                StorageEntryMetadata {
                    name: "Candidates",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The present candidate list. Sorted based on account-id. A current member or runner-up",
                        " can never enter this vector and is always implicitly assumed to be a candidate.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "vote",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "votes",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<BalanceOf<T>>",
                    },
                ],
                documentation: [
                    " Vote for a set of candidates for the upcoming round of election. This can be called to",
                    " set the initial votes, or update already existing votes.",
                    "",
                    " Upon initial voting, `value` units of `who`\'s balance is locked and a bond amount is",
                    " reserved.",
                    "",
                    " The `votes` should:",
                    "   - not be empty.",
                    "   - be less than the number of possible candidates. Note that all current members and",
                    "     runners-up are also automatically candidates for the next round.",
                    "",
                    " It is the responsibility of the caller to not place all of their balance into the lock",
                    " and keep some for further transactions.",
                    "",
                    " # <weight>",
                    " Base weight: 47.93 µs",
                    " State reads:",
                    " \t- Candidates.len() + Members.len() + RunnersUp.len()",
                    " \t- Voting (is_voter)",
                    " \t- Lock",
                    " \t- [AccountBalance(who) (unreserve + total_balance)]",
                    " State writes:",
                    " \t- Voting",
                    " \t- Lock",
                    " \t- [AccountBalance(who) (unreserve -- only when creating a new voter)]",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_voter",
                arguments: [],
                documentation: [
                    " Remove `origin` as a voter. This removes the lock and returns the bond.",
                    "",
                    " # <weight>",
                    " Base weight: 36.8 µs",
                    " All state access is from do_remove_voter.",
                    " State reads:",
                    " \t- Voting",
                    " \t- [AccountData(who)]",
                    " State writes:",
                    " \t- Voting",
                    " \t- Locks",
                    " \t- [AccountData(who)]",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "report_defunct_voter",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "defunct",
                        ty: "DefunctVoter<<T::Lookup as StaticLookup>::Source>",
                    },
                ],
                documentation: [
                    " Report `target` for being an defunct voter. In case of a valid report, the reporter is",
                    " rewarded by the bond amount of `target`. Otherwise, the reporter itself is removed and",
                    " their bond is slashed.",
                    "",
                    " A defunct voter is defined to be:",
                    "   - a voter whose current submitted votes are all invalid. i.e. all of them are no",
                    "     longer a candidate nor an active member or a runner-up.",
                    "",
                    "",
                    " The origin must provide the number of current candidates and votes of the reported target",
                    " for the purpose of accurate weight calculation.",
                    "",
                    " # <weight>",
                    " No Base weight based on min square analysis.",
                    " Complexity of candidate_count: 1.755 µs",
                    " Complexity of vote_count: 18.51 µs",
                    " State reads:",
                    "  \t- Voting(reporter)",
                    "  \t- Candidate.len()",
                    "  \t- Voting(Target)",
                    "  \t- Candidates, Members, RunnersUp (is_defunct_voter)",
                    " State writes:",
                    " \t- Lock(reporter || target)",
                    " \t- [AccountBalance(reporter)] + AccountBalance(target)",
                    " \t- Voting(reporter || target)",
                    " Note: the db access is worse with respect to db, which is when the report is correct.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "submit_candidacy",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "candidate_count",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Submit oneself for candidacy.",
                    "",
                    " A candidate will either:",
                    "   - Lose at the end of the term and forfeit their deposit.",
                    "   - Win and become a member. Members will eventually get their stash back.",
                    "   - Become a runner-up. Runners-ups are reserved members in case one gets forcefully",
                    "     removed.",
                    "",
                    " # <weight>",
                    " Base weight = 33.33 µs",
                    " Complexity of candidate_count: 0.375 µs",
                    " State reads:",
                    " \t- Candidates",
                    " \t- Members",
                    " \t- RunnersUp",
                    " \t- [AccountBalance(who)]",
                    " State writes:",
                    " \t- [AccountBalance(who)]",
                    " \t- Candidates",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "renounce_candidacy",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "renouncing",
                        ty: "Renouncing",
                    },
                ],
                documentation: [
                    " Renounce one\'s intention to be a candidate for the next election round. 3 potential",
                    " outcomes exist:",
                    " - `origin` is a candidate and not elected in any set. In this case, the bond is",
                    "   unreserved, returned and origin is removed as a candidate.",
                    " - `origin` is a current runner-up. In this case, the bond is unreserved, returned and",
                    "   origin is removed as a runner-up.",
                    " - `origin` is a current member. In this case, the bond is unreserved and origin is",
                    "   removed as a member, consequently not being a candidate for the next round anymore.",
                    "   Similar to [`remove_voter`], if replacement runners exists, they are immediately used.",
                    " <weight>",
                    " If a candidate is renouncing:",
                    " \tBase weight: 17.28 µs",
                    " \tComplexity of candidate_count: 0.235 µs",
                    " \tState reads:",
                    " \t\t- Candidates",
                    " \t\t- [AccountBalance(who) (unreserve)]",
                    " \tState writes:",
                    " \t\t- Candidates",
                    " \t\t- [AccountBalance(who) (unreserve)]",
                    " If member is renouncing:",
                    " \tBase weight: 46.25 µs",
                    " \tState reads:",
                    " \t\t- Members, RunnersUp (remove_and_replace_member),",
                    " \t\t- [AccountData(who) (unreserve)]",
                    " \tState writes:",
                    " \t\t- Members, RunnersUp (remove_and_replace_member),",
                    " \t\t- [AccountData(who) (unreserve)]",
                    " If runner is renouncing:",
                    " \tBase weight: 46.25 µs",
                    " \tState reads:",
                    " \t\t- RunnersUp (remove_and_replace_member),",
                    " \t\t- [AccountData(who) (unreserve)]",
                    " \tState writes:",
                    " \t\t- RunnersUp (remove_and_replace_member),",
                    " \t\t- [AccountData(who) (unreserve)]",
                    " </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_member",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "has_replacement",
                        ty: "bool",
                    },
                ],
                documentation: [
                    " Remove a particular member from the set. This is effective immediately and the bond of",
                    " the outgoing member is slashed.",
                    "",
                    " If a runner-up is available, then the best runner-up will be removed and replaces the",
                    " outgoing member. Otherwise, a new phragmen election is started.",
                    "",
                    " Note that this does not affect the designated block number of the next election.",
                    "",
                    " # <weight>",
                    " If we have a replacement:",
                    " \t- Base weight: 50.93 µs",
                    " \t- State reads:",
                    " \t\t- RunnersUp.len()",
                    " \t\t- Members, RunnersUp (remove_and_replace_member)",
                    " \t- State writes:",
                    " \t\t- Members, RunnersUp (remove_and_replace_member)",
                    " Else, since this is a root call and will go into phragmen, we assume full block for now.",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "NewTerm",
                arguments: [
                    "Vec<(AccountId, Balance)>",
                ],
                documentation: [
                    " A new term with \\[new_members\\]. This indicates that enough candidates existed to run the",
                    " election, not that enough have has been elected. The inner value must be examined for",
                    " this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond slashed and",
                    " none were elected, whilst `EmptyTerm` means that no candidates existed to begin with.",
                ],
            },
            EventMetadata {
                name: "EmptyTerm",
                arguments: [],
                documentation: [
                    " No (or not enough) candidates existed for this round. This is different from",
                    " `NewTerm(\\[\\])`. See the description of `NewTerm`.",
                ],
            },
            EventMetadata {
                name: "ElectionError",
                arguments: [],
                documentation: [
                    " Internal error happened while trying to perform election.",
                ],
            },
            EventMetadata {
                name: "MemberKicked",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[member\\] has been removed. This should always be followed by either `NewTerm` or",
                    " `EmptyTerm`.",
                ],
            },
            EventMetadata {
                name: "MemberRenounced",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[member\\] has renounced their candidacy.",
                ],
            },
            EventMetadata {
                name: "VoterReported",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "bool",
                ],
                documentation: [
                    " A voter was reported with the the report being successful or not.",
                    " \\[voter, reporter, success\\]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "CandidacyBond",
            ty: "BalanceOf<T>",
            value: [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "VotingBond",
            ty: "BalanceOf<T>",
            value: [
                64,
                75,
                76,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "DesiredMembers",
            ty: "u32",
            value: [
                7,
                0,
                0,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "DesiredRunnersUp",
            ty: "u32",
            value: [
                7,
                0,
                0,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "TermDuration",
            ty: "T::BlockNumber",
            value: [
                192,
                137,
                1,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "LockIdentifier",
            value: [
                112,
                104,
                114,
                101,
                108,
                101,
                99,
                116,
            ],
            documentation: [],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "UnableToVote",
            documentation: [
                " Cannot vote when no candidates or members exist.",
            ],
        },
        ErrorMetadata {
            name: "NoVotes",
            documentation: [
                " Must vote for at least one candidate.",
            ],
        },
        ErrorMetadata {
            name: "TooManyVotes",
            documentation: [
                " Cannot vote more than candidates.",
            ],
        },
        ErrorMetadata {
            name: "MaximumVotesExceeded",
            documentation: [
                " Cannot vote more than maximum allowed.",
            ],
        },
        ErrorMetadata {
            name: "LowBalance",
            documentation: [
                " Cannot vote with stake less than minimum balance.",
            ],
        },
        ErrorMetadata {
            name: "UnableToPayBond",
            documentation: [
                " Voter can not pay voting bond.",
            ],
        },
        ErrorMetadata {
            name: "MustBeVoter",
            documentation: [
                " Must be a voter.",
            ],
        },
        ErrorMetadata {
            name: "ReportSelf",
            documentation: [
                " Cannot report self.",
            ],
        },
        ErrorMetadata {
            name: "DuplicatedCandidate",
            documentation: [
                " Duplicated candidate submission.",
            ],
        },
        ErrorMetadata {
            name: "MemberSubmit",
            documentation: [
                " Member cannot re-submit candidacy.",
            ],
        },
        ErrorMetadata {
            name: "RunnerSubmit",
            documentation: [
                " Runner cannot re-submit candidacy.",
            ],
        },
        ErrorMetadata {
            name: "InsufficientCandidateFunds",
            documentation: [
                " Candidate does not have enough funds.",
            ],
        },
        ErrorMetadata {
            name: "NotMember",
            documentation: [
                " Not a member.",
            ],
        },
        ErrorMetadata {
            name: "InvalidCandidateCount",
            documentation: [
                " The provided count of number of candidates is incorrect.",
            ],
        },
        ErrorMetadata {
            name: "InvalidVoteCount",
            documentation: [
                " The provided count of number of votes is incorrect.",
            ],
        },
        ErrorMetadata {
            name: "InvalidRenouncing",
            documentation: [
                " The renouncing origin presented a wrong `Renouncing` parameter.",
            ],
        },
        ErrorMetadata {
            name: "InvalidReplacement",
            documentation: [
                " Prediction regarding replacement after member removal is wrong.",
            ],
        },
    ],
    index: 18,
}
 2020-11-21T11:59:29.416Z TRACE substrater::darwinia > ModuleMetadata {
    name: "TechnicalMembership",
    storage: Some(
        StorageMetadata {
            prefix: "Instance0Membership",
            entries: [
                StorageEntryMetadata {
                    name: "Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current membership, stored as an ordered Vec.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Prime",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current prime member, if one exists.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "add_member",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Add a member `who` to the set.",
                    "",
                    " May only be called from `T::AddOrigin`.",
                ],
            },
            FunctionMetadata {
                name: "remove_member",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Remove a member `who` from the set.",
                    "",
                    " May only be called from `T::RemoveOrigin`.",
                ],
            },
            FunctionMetadata {
                name: "swap_member",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "remove",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "add",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Swap out one member `remove` for another `add`.",
                    "",
                    " May only be called from `T::SwapOrigin`.",
                    "",
                    " Prime membership is *not* passed from `remove` to `add`, if extant.",
                ],
            },
            FunctionMetadata {
                name: "reset_members",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "members",
                        ty: "Vec<T::AccountId>",
                    },
                ],
                documentation: [
                    " Change the membership to a new set, disregarding the existing membership. Be nice and",
                    " pass `members` pre-sorted.",
                    "",
                    " May only be called from `T::ResetOrigin`.",
                ],
            },
            FunctionMetadata {
                name: "change_key",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Swap out the sending member for some other key `new`.",
                    "",
                    " May only be called from `Signed` origin of a current member.",
                    "",
                    " Prime membership is passed from the origin account to `new`, if extant.",
                ],
            },
            FunctionMetadata {
                name: "set_prime",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Set the prime member. Must be a current member.",
                    "",
                    " May only be called from `T::PrimeOrigin`.",
                ],
            },
            FunctionMetadata {
                name: "clear_prime",
                arguments: [],
                documentation: [
                    " Remove the prime member if it exists.",
                    "",
                    " May only be called from `T::PrimeOrigin`.",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "MemberAdded",
                arguments: [],
                documentation: [
                    " The given member was added; see the transaction for who.",
                ],
            },
            EventMetadata {
                name: "MemberRemoved",
                arguments: [],
                documentation: [
                    " The given member was removed; see the transaction for who.",
                ],
            },
            EventMetadata {
                name: "MembersSwapped",
                arguments: [],
                documentation: [
                    " Two members were swapped; see the transaction for who.",
                ],
            },
            EventMetadata {
                name: "MembersReset",
                arguments: [],
                documentation: [
                    " The membership was reset; see the transaction for who the new set is.",
                ],
            },
            EventMetadata {
                name: "KeyChanged",
                arguments: [],
                documentation: [
                    " One of the members\' keys changed.",
                ],
            },
            EventMetadata {
                name: "Dummy",
                arguments: [
                    "sp_std::marker::PhantomData<(AccountId, Event)>",
                ],
                documentation: [
                    " Phantom member, never used.",
                ],
            },
        ],
    ),
    constants: [],
    errors: [],
    index: 19,
}
 2020-11-21T11:59:29.416Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Treasury",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaTreasury",
            entries: [
                StorageEntryMetadata {
                    name: "ProposalCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "ProposalIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Number of proposals that have been made.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Proposals",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "ProposalIndex",
                        value: "TreasuryProposal<T::AccountId, RingBalance<T, I>, KtonBalance<T, I>\n>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Proposals that have been made.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Approvals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<ProposalIndex>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Proposal indices that have been approved but not yet awarded.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Tips",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::Hash",
                        value: "OpenTip<T::AccountId, RingBalance<T, I>, T::BlockNumber, T::Hash>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Tips that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                        " This has the insecure enumerable hash function since the key itself is already",
                        " guaranteed to be a secure hash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Reasons",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "T::Hash",
                        value: "Vec<u8>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Simple preimage lookup from the reason\'s hash to the original data. Again, has an",
                        " insecure enumerable hash since the key is guaranteed to be the result of a secure hash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "BountyCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "BountyIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Number of bounty proposals that have been made.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Bounties",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "BountyIndex",
                        value: "Bounty<T::AccountId, RingBalance<T, I>, T::BlockNumber>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Bounties that have been made.",
                    ],
                },
                StorageEntryMetadata {
                    name: "BountyDescriptions",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "BountyIndex",
                        value: "Vec<u8>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The description of each bounty.",
                    ],
                },
                StorageEntryMetadata {
                    name: "BountyApprovals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<BountyIndex>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Bounty indices that have been approved but not yet funded.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "propose_spend",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "ring_value",
                        ty: "Compact<RingBalance<T, I>>",
                    },
                    FunctionArgumentMetadata {
                        name: "kton_value",
                        ty: "Compact<KtonBalance<T, I>>",
                    },
                    FunctionArgumentMetadata {
                        name: "beneficiary",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " Put forward a suggestion for spending. A deposit proportional to the value",
                    " is reserved and slashed if the proposal is rejected. It is returned once the",
                    " proposal is awarded.",
                    "",
                    " # <weight>",
                    " - Complexity: O(1)",
                    " - DbReads: `ProposalCount`, `origin account`",
                    " - DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "reject_proposal",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal_id",
                        ty: "Compact<ProposalIndex>",
                    },
                ],
                documentation: [
                    " Reject a proposed spend. The original deposit will be slashed.",
                    "",
                    " May only be called from `T::RejectOrigin`.",
                    "",
                    " # <weight>",
                    " - Complexity: O(1)",
                    " - DbReads: `Proposals`, `rejected proposer account`",
                    " - DbWrites: `Proposals`, `rejected proposer account`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "approve_proposal",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proposal_id",
                        ty: "Compact<ProposalIndex>",
                    },
                ],
                documentation: [
                    " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                    " and the original deposit will be returned.",
                    "",
                    " May only be called from `T::RejectOrigin`.",
                    "",
                    " # <weight>",
                    " - Complexity: O(1).",
                    " - DbReads: `Proposals`, `Approvals`",
                    " - DbWrite: `Approvals`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "report_awesome",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "reason",
                        ty: "Vec<u8>",
                    },
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Report something `reason` that deserves a tip and claim any eventual the finder\'s fee.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    " `DataDepositPerByte` for each byte in `reason`.",
                    "",
                    " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                    "   a UTF-8-encoded URL.",
                    " - `who`: The account which should be credited for the tip.",
                    "",
                    " Emits `NewTip` if successful.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(R)` where `R` length of `reason`.",
                    "   - encoding and hashing of \'reason\'",
                    " - DbReads: `Reasons`, `Tips`",
                    " - DbWrites: `Reasons`, `Tips`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "retract_tip",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "hash",
                        ty: "T::Hash",
                    },
                ],
                documentation: [
                    " Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                    "",
                    " If successful, the original deposit will be unreserved.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                    " must have been reported by the signing account through `report_awesome` (and not",
                    " through `tip_new`).",
                    "",
                    " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                    "",
                    " Emits `TipRetracted` if successful.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(1)`",
                    "   - Depends on the length of `T::Hash` which is fixed.",
                    " - DbReads: `Tips`, `origin account`",
                    " - DbWrites: `Reasons`, `Tips`, `origin account`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "tip_new",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "reason",
                        ty: "Vec<u8>",
                    },
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "tip_value",
                        ty: "Compact<RingBalance<T, I>>",
                    },
                ],
                documentation: [
                    " Give a tip for something new; no finder\'s fee will be taken.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                    " member of the `Tippers` set.",
                    "",
                    " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                    "   a UTF-8-encoded URL.",
                    " - `who`: The account which should be credited for the tip.",
                    " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                    "   value of active tippers will be given to the `who`.",
                    "",
                    " Emits `NewTip` if successful.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                    "   - `O(T)`: decoding `Tipper` vec of length `T`",
                    "     `T` is charged as upper bound given by `ContainsLengthBound`.",
                    "     The actual cost depends on the implementation of `T::Tippers`.",
                    "   - `O(R)`: hashing and encoding of reason of length `R`",
                    " - DbReads: `Tippers`, `Reasons`",
                    " - DbWrites: `Reasons`, `Tips`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "tip",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "hash",
                        ty: "T::Hash",
                    },
                    FunctionArgumentMetadata {
                        name: "tip_value",
                        ty: "Compact<RingBalance<T, I>>",
                    },
                ],
                documentation: [
                    " Declare a tip value for an already-open tip.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                    " member of the `Tippers` set.",
                    "",
                    " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                    "   account ID.",
                    " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                    "   value of active tippers will be given to the `who`.",
                    "",
                    " Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                    " has started.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(T)` where `T` is the number of tippers.",
                    "   decoding `Tipper` vec of length `T`, insert tip and check closing,",
                    "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                    "   The actual cost depends on the implementation of `T::Tippers`.",
                    "",
                    "   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                    "   is weighted as if almost full i.e of length `T-1`.",
                    " - DbReads: `Tippers`, `Tips`",
                    " - DbWrites: `Tips`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "close_tip",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "hash",
                        ty: "T::Hash",
                    },
                ],
                documentation: [
                    " Close and payout a tip.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " The tip identified by `hash` must have finished its countdown period.",
                    "",
                    " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                    "",
                    " # <weight>",
                    " - Complexity: `O(T)` where `T` is the number of tippers.",
                    "   decoding `Tipper` vec of length `T`.",
                    "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                    "   The actual cost depends on the implementation of `T::Tippers`.",
                    " - DbReads: `Tips`, `Tippers`, `tip finder`",
                    " - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "propose_bounty",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "Compact<RingBalance<T, I>>",
                    },
                    FunctionArgumentMetadata {
                        name: "description",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Propose a new bounty.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    " `DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                    " or slashed when rejected.",
                    "",
                    " - `curator`: The curator account whom will manage this bounty.",
                    " - `fee`: The curator fee.",
                    " - `value`: The total payment amount of this bounty, curator fee included.",
                    " - `description`: The description of this bounty.",
                ],
            },
            FunctionMetadata {
                name: "approve_bounty",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<ProposalIndex>",
                    },
                ],
                documentation: [
                    " Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                    " and the original deposit will be returned.",
                    "",
                    " May only be called from `T::ApproveOrigin`.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB change.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "propose_curator",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<ProposalIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "curator",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "fee",
                        ty: "Compact<RingBalance<T, I>>",
                    },
                ],
                documentation: [
                    " Assign a curator to a funded bounty.",
                    "",
                    " May only be called from `T::ApproveOrigin`.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB change.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "unassign_curator",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<ProposalIndex>",
                    },
                ],
                documentation: [
                    " Unassign curator from a bounty.",
                    "",
                    " This function can only be called by the `RejectOrigin` a signed origin.",
                    "",
                    " If this function is called by the `RejectOrigin`, we assume that the curator is malicious",
                    " or inactive. As a result, we will slash the curator when possible.",
                    "",
                    " If the origin is the curator, we take this as a sign they are unable to do their job and",
                    " they willingly give up. We could slash them, but for now we allow them to recover their",
                    " deposit and exit without issue. (We may want to change this if it is abused.)",
                    "",
                    " Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                    " anyone in the community to call out that a curator is not doing their due diligence, and",
                    " we should pick a new curator. In this case the curator should also be slashed.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB change.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "accept_curator",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<ProposalIndex>",
                    },
                ],
                documentation: [
                    " Accept the curator role for a bounty.",
                    " A deposit will be reserved from curator and refund upon successful payout.",
                    "",
                    " May only be called from the curator.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB change.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "award_bounty",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<ProposalIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "beneficiary",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",
                    "",
                    " The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    " - `bounty_id`: Bounty ID to award.",
                    " - `beneficiary`: The beneficiary account whom will receive the payout.",
                ],
            },
            FunctionMetadata {
                name: "claim_bounty",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<BountyIndex>",
                    },
                ],
                documentation: [
                    " Claim the payout from an awarded bounty after payout delay.",
                    "",
                    " The dispatch origin for this call must be the beneficiary of this bounty.",
                    "",
                    " - `bounty_id`: Bounty ID to claim.",
                ],
            },
            FunctionMetadata {
                name: "close_bounty",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<BountyIndex>",
                    },
                ],
                documentation: [
                    " Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                    " the curator deposit will be unreserved if possible.",
                    "",
                    " Only `T::RejectOrigin` is able to cancel a bounty.",
                    "",
                    " - `bounty_id`: Bounty ID to cancel.",
                ],
            },
            FunctionMetadata {
                name: "extend_bounty_expiry",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "bounty_id",
                        ty: "Compact<BountyIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "_remark",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Extend the expiry time of an active bounty.",
                    "",
                    " The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    " - `bounty_id`: Bounty ID to extend.",
                    " - `remark`: additional information.",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Proposed",
                arguments: [
                    "ProposalIndex",
                ],
                documentation: [
                    " New proposal. [proposal_index]",
                ],
            },
            EventMetadata {
                name: "Spending",
                arguments: [
                    "RingBalance",
                    "KtonBalance",
                ],
                documentation: [
                    " We have ended a spend period and will now allocate funds. [budget_remaining_ring]",
                ],
            },
            EventMetadata {
                name: "Awarded",
                arguments: [
                    "ProposalIndex",
                    "RingBalance",
                    "KtonBalance",
                    "AccountId",
                ],
                documentation: [
                    " Some funds have been allocated. [proposal_index, award, beneficiary]",
                ],
            },
            EventMetadata {
                name: "Rejected",
                arguments: [
                    "ProposalIndex",
                    "RingBalance",
                    "KtonBalance",
                ],
                documentation: [
                    " A proposal was rejected; funds were slashed. [proposal_index, slashed]",
                ],
            },
            EventMetadata {
                name: "Burnt",
                arguments: [
                    "RingBalance",
                    "KtonBalance",
                ],
                documentation: [
                    " Some of our funds have been burnt. [burn]",
                ],
            },
            EventMetadata {
                name: "Rollover",
                arguments: [
                    "RingBalance",
                    "KtonBalance",
                ],
                documentation: [
                    " Spending has finished; this is the amount that rolls over until next spend. [budget_remaining_ring]",
                ],
            },
            EventMetadata {
                name: "DepositRing",
                arguments: [
                    "RingBalance",
                ],
                documentation: [
                    " Some *RING* have been deposited. [deposit]",
                ],
            },
            EventMetadata {
                name: "DepositKton",
                arguments: [
                    "KtonBalance",
                ],
                documentation: [
                    " Some *KTON* have been deposited. [deposit]",
                ],
            },
            EventMetadata {
                name: "NewTip",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A new tip suggestion has been opened. [tip_hash]",
                ],
            },
            EventMetadata {
                name: "TipClosing",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A tip suggestion has reached threshold and is closing. [tip_hash]",
                ],
            },
            EventMetadata {
                name: "TipClosed",
                arguments: [
                    "Hash",
                    "AccountId",
                    "RingBalance",
                ],
                documentation: [
                    " A tip suggestion has been closed. [tip_hash, who, payout]",
                ],
            },
            EventMetadata {
                name: "TipRetracted",
                arguments: [
                    "Hash",
                ],
                documentation: [
                    " A tip suggestion has been retracted. [tip_hash]",
                ],
            },
            EventMetadata {
                name: "BountyProposed",
                arguments: [
                    "BountyIndex",
                ],
                documentation: [
                    " New bounty proposal. [index]",
                ],
            },
            EventMetadata {
                name: "BountyRejected",
                arguments: [
                    "BountyIndex",
                    "RingBalance",
                ],
                documentation: [
                    " A bounty proposal was rejected; funds were slashed. [index, bond]",
                ],
            },
            EventMetadata {
                name: "BountyBecameActive",
                arguments: [
                    "BountyIndex",
                ],
                documentation: [
                    " A bounty proposal is funded and became active. [index]",
                ],
            },
            EventMetadata {
                name: "BountyAwarded",
                arguments: [
                    "BountyIndex",
                    "AccountId",
                ],
                documentation: [
                    " A bounty is awarded to a beneficiary. [index, beneficiary]",
                ],
            },
            EventMetadata {
                name: "BountyClaimed",
                arguments: [
                    "BountyIndex",
                    "RingBalance",
                    "AccountId",
                ],
                documentation: [
                    " A bounty is claimed by beneficiary. [index, payout, beneficiary]",
                ],
            },
            EventMetadata {
                name: "BountyCanceled",
                arguments: [
                    "BountyIndex",
                ],
                documentation: [
                    " A bounty is cancelled. [index]",
                ],
            },
            EventMetadata {
                name: "BountyExtended",
                arguments: [
                    "BountyIndex",
                ],
                documentation: [
                    " A bounty expiry is extended. [index]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ProposalBond",
            ty: "Permill",
            value: [
                80,
                195,
                0,
                0,
            ],
            documentation: [
                " Fraction of a proposal\'s value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not.",
            ],
        },
        ModuleConstantMetadata {
            name: "RingProposalBondMinimum",
            ty: "RingBalance<T, I>",
            value: [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " Minimum amount of *RING* that should be placed in a deposit for making a proposal.",
            ],
        },
        ModuleConstantMetadata {
            name: "KtonProposalBondMinimum",
            ty: "KtonBalance<T, I>",
            value: [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " Minimum amount of *KTON* that should be placed in a deposit for making a proposal.",
            ],
        },
        ModuleConstantMetadata {
            name: "SpendPeriod",
            ty: "T::BlockNumber",
            value: [
                0,
                70,
                5,
                0,
            ],
            documentation: [
                " Period between successive spends.",
            ],
        },
        ModuleConstantMetadata {
            name: "Burn",
            ty: "Permill",
            value: [
                16,
                39,
                0,
                0,
            ],
            documentation: [
                " Percentage of spare funds (if any) that are burnt per spend period.",
            ],
        },
        ModuleConstantMetadata {
            name: "TipCountdown",
            ty: "T::BlockNumber",
            value: [
                64,
                56,
                0,
                0,
            ],
            documentation: [
                " The period for which a tip remains open after is has achieved threshold tippers.",
            ],
        },
        ModuleConstantMetadata {
            name: "TipFindersFee",
            ty: "Percent",
            value: [
                20,
            ],
            documentation: [
                " The amount of the final tip which goes to the original reporter of the tip.",
            ],
        },
        ModuleConstantMetadata {
            name: "TipReportDepositBase",
            ty: "RingBalance<T, I>",
            value: [
                64,
                66,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount held on deposit for placing a tip report.",
            ],
        },
        ModuleConstantMetadata {
            name: "DataDepositPerByte",
            ty: "RingBalance<T, I>",
            value: [
                64,
                66,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount held on deposit per byte within the tip report reason or bounty description.",
            ],
        },
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                116,
                114,
                115,
                114,
                121,
            ],
            documentation: [
                " The treasury\'s module id, used for deriving its sovereign account ID.",
            ],
        },
        ModuleConstantMetadata {
            name: "BountyDepositBase",
            ty: "RingBalance<T, I>",
            value: [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount held on deposit for placing a bounty proposal.",
            ],
        },
        ModuleConstantMetadata {
            name: "BountyDepositPayoutDelay",
            ty: "T::BlockNumber",
            value: [
                0,
                194,
                1,
                0,
            ],
            documentation: [
                " The delay period for which a bounty beneficiary need to wait before claim the payout.",
            ],
        },
        ModuleConstantMetadata {
            name: "BountyCuratorDeposit",
            ty: "Permill",
            value: [
                32,
                161,
                7,
                0,
            ],
            documentation: [
                " Percentage of the curator fee that will be reserved upfront as deposit for bounty curator.",
            ],
        },
        ModuleConstantMetadata {
            name: "BountyValueMinimum",
            ty: "RingBalance<T, I>",
            value: [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "MaximumReasonLength",
            ty: "u32",
            value: [
                0,
                64,
                0,
                0,
            ],
            documentation: [
                " Maximum acceptable reason length.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "InsufficientProposersBalance",
            documentation: [
                " Proposer\'s balance is too low.",
            ],
        },
        ErrorMetadata {
            name: "InvalidIndex",
            documentation: [
                " No proposal or bounty at that index.",
            ],
        },
        ErrorMetadata {
            name: "ReasonTooBig",
            documentation: [
                " The reason given is just too big.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyKnown",
            documentation: [
                " The tip was already found/started.",
            ],
        },
        ErrorMetadata {
            name: "UnknownTip",
            documentation: [
                " The tip hash is unknown.",
            ],
        },
        ErrorMetadata {
            name: "NotFinder",
            documentation: [
                " The account attempting to retract the tip is not the finder of the tip.",
            ],
        },
        ErrorMetadata {
            name: "StillOpen",
            documentation: [
                " The tip cannot be claimed/closed because there are not enough tippers yet.",
            ],
        },
        ErrorMetadata {
            name: "Premature",
            documentation: [
                " The tip cannot be claimed/closed because it\'s still in the countdown period.",
            ],
        },
        ErrorMetadata {
            name: "UnexpectedStatus",
            documentation: [
                " The bounty status is unexpected.",
            ],
        },
        ErrorMetadata {
            name: "RequireCurator",
            documentation: [
                " Require bounty curator.",
            ],
        },
        ErrorMetadata {
            name: "InvalidValue",
            documentation: [
                " Invalid bounty value.",
            ],
        },
        ErrorMetadata {
            name: "InvalidFee",
            documentation: [
                " Invalid bounty fee.",
            ],
        },
        ErrorMetadata {
            name: "PendingPayout",
            documentation: [
                " A bounty payout is pending.",
                " To cancel the bounty, you must unassign and slash the curator.",
            ],
        },
    ],
    index: 20,
}
 2020-11-21T11:59:29.431Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Vesting",
    storage: Some(
        StorageMetadata {
            prefix: "Vesting",
            entries: [
                StorageEntryMetadata {
                    name: "Vesting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Information regarding the vesting of a given account.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "vest",
                arguments: [],
                documentation: [
                    " Unlock any vested funds of the sender account.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                    " locked under this module.",
                    "",
                    " Emits either `VestingCompleted` or `VestingUpdated`.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " - DbWeight: 2 Reads, 2 Writes",
                    "     - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                    "     - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vest_other",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "target",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " Unlock any vested funds of a `target` account.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `target`: The account whose vested funds should be unlocked. Must have funds still",
                    " locked under this module.",
                    "",
                    " Emits either `VestingCompleted` or `VestingUpdated`.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " - DbWeight: 3 Reads, 3 Writes",
                    "     - Reads: Vesting Storage, Balances Locks, Target Account",
                    "     - Writes: Vesting Storage, Balances Locks, Target Account",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vested_transfer",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "target",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "schedule",
                        ty: "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                    },
                ],
                documentation: [
                    " Create a vested transfer.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `target`: The account that should be transferred the vested funds.",
                    " - `amount`: The amount of funds to transfer and will be vested.",
                    " - `schedule`: The vesting schedule attached to the transfer.",
                    "",
                    " Emits `VestingCreated`.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " - DbWeight: 3 Reads, 3 Writes",
                    "     - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                    "     - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "force_vested_transfer",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "source",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "target",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "schedule",
                        ty: "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                    },
                ],
                documentation: [
                    " Force a vested transfer.",
                    "",
                    " The dispatch origin for this call must be _Root_.",
                    "",
                    " - `source`: The account whose funds should be transferred.",
                    " - `target`: The account that should be transferred the vested funds.",
                    " - `amount`: The amount of funds to transfer and will be vested.",
                    " - `schedule`: The vesting schedule attached to the transfer.",
                    "",
                    " Emits `VestingCreated`.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " - DbWeight: 4 Reads, 4 Writes",
                    "     - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                    "     - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "VestingUpdated",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " The amount vested has been updated. This could indicate more funds are available. The",
                    " balance given is the amount which is left unvested (and thus locked).",
                    " [account, unvested]",
                ],
            },
            EventMetadata {
                name: "VestingCompleted",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " An [account] has become fully vested. No further vesting can happen.",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "MinVestedTransfer",
            ty: "BalanceOf<T>",
            value: [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The minimum amount to be transferred to create a new vesting schedule.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "NotVesting",
            documentation: [
                " The account given is not vesting.",
            ],
        },
        ErrorMetadata {
            name: "ExistingVestingSchedule",
            documentation: [
                " An existing vesting schedule already exists for this account that cannot be clobbered.",
            ],
        },
        ErrorMetadata {
            name: "AmountLow",
            documentation: [
                " Amount being transferred is too low to create a vesting schedule.",
            ],
        },
    ],
    index: 21,
}
 2020-11-21T11:59:29.440Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Utility",
    storage: None,
    calls: Some(
        [
            FunctionMetadata {
                name: "batch",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "calls",
                        ty: "Vec<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Send a batch of dispatch calls.",
                    "",
                    " May be called from any origin.",
                    "",
                    " - `calls`: The calls to be dispatched from the same origin.",
                    "",
                    " If origin is root then call are dispatch without checking origin filter. (This includes",
                    " bypassing `frame_system::Trait::BaseCallFilter`).",
                    "",
                    " # <weight>",
                    " - Base weight: 14.39 + .987 * c µs",
                    " - Plus the sum of the weights of the `calls`.",
                    " - Plus one additional event. (repeat read/write)",
                    " # </weight>",
                    "",
                    " This will return `Ok` in all circumstances. To determine the success of the batch, an",
                    " event is deposited. If a call failed and the batch was interrupted, then the",
                    " `BatchInterrupted` event is deposited, along with the number of successful calls made",
                    " and the error of the failed call. If all were successful, then the `BatchCompleted`",
                    " event is deposited.",
                ],
            },
            FunctionMetadata {
                name: "as_derivative",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "u16",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Send a call through an indexed pseudonym of the sender.",
                    "",
                    " Filter from origin are passed along. The call will be dispatched with an origin which",
                    " use the same filter as the origin of this call.",
                    "",
                    " NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                    " because you expect `proxy` to have been used prior in the call stack and you do not want",
                    " the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                    " in the Multisig pallet instead.",
                    "",
                    " NOTE: Prior to version *12, this was called `as_limited_sub`.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "BatchInterrupted",
                arguments: [
                    "u32",
                    "DispatchError",
                ],
                documentation: [
                    " Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                    " well as the error. \\[index, error\\]",
                ],
            },
            EventMetadata {
                name: "BatchCompleted",
                arguments: [],
                documentation: [
                    " Batch of dispatches completed fully with no error.",
                ],
            },
        ],
    ),
    constants: [],
    errors: [],
    index: 22,
}
 2020-11-21T11:59:29.442Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Identity",
    storage: Some(
        StorageMetadata {
            prefix: "Identity",
            entries: [
                StorageEntryMetadata {
                    name: "IdentityOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "Registration<BalanceOf<T>>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Information that is pertinent to identify the entity behind an account.",
                        "",
                        " TWOX-NOTE: OK ― `AccountId` is a secure hash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SuperOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "(T::AccountId, Data)",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The super-identity of an alternative \"sub\" identity together with its name, within that",
                        " context. If the account is not some other account\'s sub-identity, then just `None`.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SubsOf",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Alternative \"sub\" identities of this account.",
                        "",
                        " The first item is the deposit, the second is a vector of the accounts.",
                        "",
                        " TWOX-NOTE: OK ― `AccountId` is a secure hash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Registrars",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<Option<RegistrarInfo<BalanceOf<T>, T::AccountId>>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of registrars. Not expected to get very big as can only be added through a",
                        " special origin (likely a council motion).",
                        "",
                        " The index into this can be cast to `RegistrarIndex` to get a valid value.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "add_registrar",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "account",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Add a registrar to the system.",
                    "",
                    " The dispatch origin for this call must be `T::RegistrarOrigin`.",
                    "",
                    " - `account`: the account of the registrar.",
                    "",
                    " Emits `RegistrarAdded` if successful.",
                    "",
                    " # <weight>",
                    " - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                    " - One storage mutation (codec `O(R)`).",
                    " - One event.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_identity",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "info",
                        ty: "IdentityInfo",
                    },
                ],
                documentation: [
                    " Set an account\'s identity information and reserve the appropriate deposit.",
                    "",
                    " If the account already has identity information, the deposit is taken as part payment",
                    " for the new deposit.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `info`: The identity information.",
                    "",
                    " Emits `IdentitySet` if successful.",
                    "",
                    " # <weight>",
                    " - `O(X + X\' + R)`",
                    "   - where `X` additional-field-count (deposit-bounded and code-bounded)",
                    "   - where `R` judgements-count (registrar-count-bounded)",
                    " - One balance reserve operation.",
                    " - One storage mutation (codec-read `O(X\' + R)`, codec-write `O(X + R)`).",
                    " - One event.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_subs",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "subs",
                        ty: "Vec<(T::AccountId, Data)>",
                    },
                ],
                documentation: [
                    " Set the sub-accounts of the sender.",
                    "",
                    " Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                    " and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    " identity.",
                    "",
                    " - `subs`: The identity\'s (new) sub-accounts.",
                    "",
                    " # <weight>",
                    " - `O(P + S)`",
                    "   - where `P` old-subs-count (hard- and deposit-bounded).",
                    "   - where `S` subs-count (hard- and deposit-bounded).",
                    " - At most one balance operations.",
                    " - DB:",
                    "   - `P + S` storage mutations (codec complexity `O(1)`)",
                    "   - One storage read (codec complexity `O(P)`).",
                    "   - One storage write (codec complexity `O(S)`).",
                    "   - One storage-exists (`IdentityOf::contains_key`).",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "clear_identity",
                arguments: [],
                documentation: [
                    " Clear an account\'s identity info and all sub-accounts and return all deposits.",
                    "",
                    " Payment: All reserved balances on the account are returned.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    " identity.",
                    "",
                    " Emits `IdentityCleared` if successful.",
                    "",
                    " # <weight>",
                    " - `O(R + S + X)`",
                    "   - where `R` registrar-count (governance-bounded).",
                    "   - where `S` subs-count (hard- and deposit-bounded).",
                    "   - where `X` additional-field-count (deposit-bounded and code-bounded).",
                    " - One balance-unreserve operation.",
                    " - `2` storage reads and `S + 2` storage deletions.",
                    " - One event.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "request_judgement",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "reg_index",
                        ty: "Compact<RegistrarIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "max_fee",
                        ty: "Compact<BalanceOf<T>>",
                    },
                ],
                documentation: [
                    " Request a judgement from a registrar.",
                    "",
                    " Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                    " given.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a",
                    " registered identity.",
                    "",
                    " - `reg_index`: The index of the registrar whose judgement is requested.",
                    " - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                    "",
                    " ```nocompile",
                    " Self::registrars().get(reg_index).unwrap().fee",
                    " ```",
                    "",
                    " Emits `JudgementRequested` if successful.",
                    "",
                    " # <weight>",
                    " - `O(R + X)`.",
                    " - One balance-reserve operation.",
                    " - Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                    " - One event.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "cancel_request",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "reg_index",
                        ty: "RegistrarIndex",
                    },
                ],
                documentation: [
                    " Cancel a previous request.",
                    "",
                    " Payment: A previously reserved deposit is returned on success.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a",
                    " registered identity.",
                    "",
                    " - `reg_index`: The index of the registrar whose judgement is no longer requested.",
                    "",
                    " Emits `JudgementUnrequested` if successful.",
                    "",
                    " # <weight>",
                    " - `O(R + X)`.",
                    " - One balance-reserve operation.",
                    " - One storage mutation `O(R + X)`.",
                    " - One event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_fee",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<RegistrarIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "fee",
                        ty: "Compact<BalanceOf<T>>",
                    },
                ],
                documentation: [
                    " Set the fee required for a judgement to be requested from a registrar.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    " of the registrar whose index is `index`.",
                    "",
                    " - `index`: the index of the registrar whose fee is to be set.",
                    " - `fee`: the new fee.",
                    "",
                    " # <weight>",
                    " - `O(R)`.",
                    " - One storage mutation `O(R)`.",
                    " - Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_account_id",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<RegistrarIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Change the account associated with a registrar.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    " of the registrar whose index is `index`.",
                    "",
                    " - `index`: the index of the registrar whose fee is to be set.",
                    " - `new`: the new account ID.",
                    "",
                    " # <weight>",
                    " - `O(R)`.",
                    " - One storage mutation `O(R)`.",
                    " - Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_fields",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "Compact<RegistrarIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "fields",
                        ty: "IdentityFields",
                    },
                ],
                documentation: [
                    " Set the field information for a registrar.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    " of the registrar whose index is `index`.",
                    "",
                    " - `index`: the index of the registrar whose fee is to be set.",
                    " - `fields`: the fields that the registrar concerns themselves with.",
                    "",
                    " # <weight>",
                    " - `O(R)`.",
                    " - One storage mutation `O(R)`.",
                    " - Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "provide_judgement",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "reg_index",
                        ty: "Compact<RegistrarIndex>",
                    },
                    FunctionArgumentMetadata {
                        name: "target",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "judgement",
                        ty: "Judgement<BalanceOf<T>>",
                    },
                ],
                documentation: [
                    " Provide a judgement for an account\'s identity.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    " of the registrar whose index is `reg_index`.",
                    "",
                    " - `reg_index`: the index of the registrar whose judgement is being made.",
                    " - `target`: the account whose identity the judgement is upon. This must be an account",
                    "   with a registered identity.",
                    " - `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                    "",
                    " Emits `JudgementGiven` if successful.",
                    "",
                    " # <weight>",
                    " - `O(R + X)`.",
                    " - One balance-transfer operation.",
                    " - Up to one account-lookup operation.",
                    " - Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                    " - One event.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "kill_identity",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "target",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " Remove an account\'s identity and sub-account information and slash the deposits.",
                    "",
                    " Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                    " `Slash`. Verification request deposits are not returned; they should be cancelled",
                    " manually using `cancel_request`.",
                    "",
                    " The dispatch origin for this call must match `T::ForceOrigin`.",
                    "",
                    " - `target`: the account whose identity the judgement is upon. This must be an account",
                    "   with a registered identity.",
                    "",
                    " Emits `IdentityKilled` if successful.",
                    "",
                    " # <weight>",
                    " - `O(R + S + X)`.",
                    " - One balance-reserve operation.",
                    " - `S + 2` storage mutations.",
                    " - One event.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "add_sub",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "sub",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "data",
                        ty: "Data",
                    },
                ],
                documentation: [
                    " Add the given account to the sender\'s subs.",
                    "",
                    " Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    " to the sender.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    " sub identity of `sub`.",
                ],
            },
            FunctionMetadata {
                name: "rename_sub",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "sub",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "data",
                        ty: "Data",
                    },
                ],
                documentation: [
                    " Alter the associated name of the given sub-account.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    " sub identity of `sub`.",
                ],
            },
            FunctionMetadata {
                name: "remove_sub",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "sub",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " Remove the given account from the sender\'s subs.",
                    "",
                    " Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    " to the sender.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    " sub identity of `sub`.",
                ],
            },
            FunctionMetadata {
                name: "quit_sub",
                arguments: [],
                documentation: [
                    " Remove the sender as a sub-account.",
                    "",
                    " Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    " to the sender (*not* the original depositor).",
                    "",
                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    " super-identity.",
                    "",
                    " NOTE: This should not normally be used, but is provided in the case that the non-",
                    " controller of an account is maliciously registered as a sub-account.",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "IdentitySet",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A name was set or reset (which will remove all judgements). \\[who\\]",
                ],
            },
            EventMetadata {
                name: "IdentityCleared",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " A name was cleared, and the given balance returned. \\[who, deposit\\]",
                ],
            },
            EventMetadata {
                name: "IdentityKilled",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " A name was removed and the given balance slashed. \\[who, deposit\\]",
                ],
            },
            EventMetadata {
                name: "JudgementRequested",
                arguments: [
                    "AccountId",
                    "RegistrarIndex",
                ],
                documentation: [
                    " A judgement was asked from a registrar. \\[who, registrar_index\\]",
                ],
            },
            EventMetadata {
                name: "JudgementUnrequested",
                arguments: [
                    "AccountId",
                    "RegistrarIndex",
                ],
                documentation: [
                    " A judgement request was retracted. \\[who, registrar_index\\]",
                ],
            },
            EventMetadata {
                name: "JudgementGiven",
                arguments: [
                    "AccountId",
                    "RegistrarIndex",
                ],
                documentation: [
                    " A judgement was given by a registrar. \\[target, registrar_index\\]",
                ],
            },
            EventMetadata {
                name: "RegistrarAdded",
                arguments: [
                    "RegistrarIndex",
                ],
                documentation: [
                    " A registrar was added. \\[registrar_index\\]",
                ],
            },
            EventMetadata {
                name: "SubIdentityAdded",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " A sub-identity was added to an identity and the deposit paid. \\[sub, main, deposit\\]",
                ],
            },
            EventMetadata {
                name: "SubIdentityRemoved",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " A sub-identity was removed from an identity and the deposit freed.",
                    " \\[sub, main, deposit\\]",
                ],
            },
            EventMetadata {
                name: "SubIdentityRevoked",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " A sub-identity was cleared, and the given deposit repatriated from the",
                    " main identity account to the sub-identity account. \\[sub, main, deposit\\]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "BasicDeposit",
            ty: "BalanceOf<T>",
            value: [
                200,
                145,
                49,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount held on deposit for a registered identity.",
            ],
        },
        ModuleConstantMetadata {
            name: "FieldDeposit",
            ty: "BalanceOf<T>",
            value: [
                200,
                25,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount held on deposit per additional field for a registered identity.",
            ],
        },
        ModuleConstantMetadata {
            name: "SubAccountDeposit",
            ty: "BalanceOf<T>",
            value: [
                180,
                65,
                49,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item\'s value will increase by the size of an account ID, and there will be",
                " another trie item whose value is the size of an account ID plus 32 bytes.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxSubAccounts",
            ty: "u32",
            value: [
                100,
                0,
                0,
                0,
            ],
            documentation: [
                " The maximum number of sub-accounts allowed per identified account.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxAdditionalFields",
            ty: "u32",
            value: [
                100,
                0,
                0,
                0,
            ],
            documentation: [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxRegistrars",
            ty: "u32",
            value: [
                20,
                0,
                0,
                0,
            ],
            documentation: [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "TooManySubAccounts",
            documentation: [
                " Too many subs-accounts.",
            ],
        },
        ErrorMetadata {
            name: "NotFound",
            documentation: [
                " Account isn\'t found.",
            ],
        },
        ErrorMetadata {
            name: "NotNamed",
            documentation: [
                " Account isn\'t named.",
            ],
        },
        ErrorMetadata {
            name: "EmptyIndex",
            documentation: [
                " Empty index.",
            ],
        },
        ErrorMetadata {
            name: "FeeChanged",
            documentation: [
                " Fee is changed.",
            ],
        },
        ErrorMetadata {
            name: "NoIdentity",
            documentation: [
                " No identity found.",
            ],
        },
        ErrorMetadata {
            name: "StickyJudgement",
            documentation: [
                " Sticky judgement.",
            ],
        },
        ErrorMetadata {
            name: "JudgementGiven",
            documentation: [
                " Judgement given.",
            ],
        },
        ErrorMetadata {
            name: "InvalidJudgement",
            documentation: [
                " Invalid judgement.",
            ],
        },
        ErrorMetadata {
            name: "InvalidIndex",
            documentation: [
                " The index is invalid.",
            ],
        },
        ErrorMetadata {
            name: "InvalidTarget",
            documentation: [
                " The target is invalid.",
            ],
        },
        ErrorMetadata {
            name: "TooManyFields",
            documentation: [
                " Too many additional fields.",
            ],
        },
        ErrorMetadata {
            name: "TooManyRegistrars",
            documentation: [
                " Maximum amount of registrars reached. Cannot add any more.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyClaimed",
            documentation: [
                " Account ID is already named.",
            ],
        },
        ErrorMetadata {
            name: "NotSub",
            documentation: [
                " Sender is not a sub-account.",
            ],
        },
        ErrorMetadata {
            name: "NotOwned",
            documentation: [
                " Sub-account isn\'t owned by sender.",
            ],
        },
    ],
    index: 23,
}
 2020-11-21T11:59:29.464Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Society",
    storage: Some(
        StorageMetadata {
            prefix: "Society",
            entries: [
                StorageEntryMetadata {
                    name: "Founder",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The first member.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Rules",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::Hash",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " A hash of the rules of this society concerning membership. Can only be set once and",
                        " only by the founder.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Candidates",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<Bid<T::AccountId, BalanceOf<T, I>>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current set of candidates; bidders that are attempting to become members.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SuspendedCandidates",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "(BalanceOf<T, I>, BidKind<T::AccountId, BalanceOf<T, I>>)",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of suspended candidates.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Pot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "BalanceOf<T, I>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Amount of our account balance that is specifically for the next round\'s bid(s).",
                    ],
                },
                StorageEntryMetadata {
                    name: "Head",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The most primary from the most recently approved members.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current set of members, ordered.",
                    ],
                },
                StorageEntryMetadata {
                    name: "SuspendedMembers",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "bool",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of suspended members.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Bids",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<Bid<T::AccountId, BalanceOf<T, I>>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current bids, stored ordered by the value of the bid.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Vouching",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "VouchingStatus",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Members currently vouching or banned from vouching again",
                    ],
                },
                StorageEntryMetadata {
                    name: "Payouts",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "Vec<(T::BlockNumber, BalanceOf<T, I>)>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Pending payouts; ordered by block number, with the amount that should be paid out.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Strikes",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "StrikeCount",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The ongoing number of losing votes cast by the member.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Votes",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "T::AccountId",
                        key2: "T::AccountId",
                        value: "Vote",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Double map from Candidate -> Voter -> (Maybe) Vote.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Defender",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The defending member currently being challenged.",
                    ],
                },
                StorageEntryMetadata {
                    name: "DefenderVotes",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "Vote",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Votes for the defender.",
                    ],
                },
                StorageEntryMetadata {
                    name: "MaxMembers",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The max number of members for the society at one time.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "bid",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "BalanceOf<T, I>",
                    },
                ],
                documentation: [
                    " A user outside of the society can make a bid for entry.",
                    "",
                    " Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
                    " when the bid becomes a member, or if the bid calls `unbid`.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `value`: A one time payment the bid would like to receive when joining the society.",
                    "",
                    " # <weight>",
                    " Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
                    " - Storage Reads:",
                    " \t- One storage read to check for suspended candidate. O(1)",
                    " \t- One storage read to check for suspended member. O(1)",
                    " \t- One storage read to retrieve all current bids. O(B)",
                    " \t- One storage read to retrieve all current candidates. O(C)",
                    " \t- One storage read to retrieve all members. O(M)",
                    " - Storage Writes:",
                    " \t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
                    " \t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                    " - Notable Computation:",
                    " \t- O(B + C + log M) search to check user is not already a part of society.",
                    " \t- O(log B) search to insert the new bid sorted.",
                    " - External Module Operations:",
                    " \t- One balance reserve operation. O(X)",
                    " \t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                    " - Events:",
                    " \t- One event for new bid.",
                    " \t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                    "",
                    " Total Complexity: O(M + B + C + logM + logB + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "unbid",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "pos",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " A bidder can remove their bid for entry into society.",
                    " By doing so, they will have their candidate deposit returned or",
                    " they will unvouch their voucher.",
                    "",
                    " Payment: The bid deposit is unreserved if the user made a bid.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a bidder.",
                    "",
                    " Parameters:",
                    " - `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
                    "",
                    " # <weight>",
                    " Key: B (len of bids), X (balance unreserve)",
                    " - One storage read and write to retrieve and update the bids. O(B)",
                    " - Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
                    " - One event.",
                    "",
                    " Total Complexity: O(B + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vouch",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "value",
                        ty: "BalanceOf<T, I>",
                    },
                    FunctionArgumentMetadata {
                        name: "tip",
                        ty: "BalanceOf<T, I>",
                    },
                ],
                documentation: [
                    " As a member, vouch for someone to join society by placing a bid on their behalf.",
                    "",
                    " There is no deposit required to vouch for a new bid, but a member can only vouch for",
                    " one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
                    " the suspension judgement origin, the member will be banned from vouching again.",
                    "",
                    " As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
                    " be paid as a portion of the reward the member will receive for joining the society.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a member.",
                    "",
                    " Parameters:",
                    " - `who`: The user who you would like to vouch for.",
                    " - `value`: The total reward to be paid between you and the candidate if they become",
                    " a member in the society.",
                    " - `tip`: Your cut of the total `value` payout when the candidate is inducted into",
                    " the society. Tips larger than `value` will be saturated upon payout.",
                    "",
                    " # <weight>",
                    " Key: B (len of bids), C (len of candidates), M (len of members)",
                    " - Storage Reads:",
                    " \t- One storage read to retrieve all members. O(M)",
                    " \t- One storage read to check member is not already vouching. O(1)",
                    " \t- One storage read to check for suspended candidate. O(1)",
                    " \t- One storage read to check for suspended member. O(1)",
                    " \t- One storage read to retrieve all current bids. O(B)",
                    " \t- One storage read to retrieve all current candidates. O(C)",
                    " - Storage Writes:",
                    " \t- One storage write to insert vouching status to the member. O(1)",
                    " \t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
                    " \t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                    " - Notable Computation:",
                    " \t- O(log M) search to check sender is a member.",
                    " \t- O(B + C + log M) search to check user is not already a part of society.",
                    " \t- O(log B) search to insert the new bid sorted.",
                    " - External Module Operations:",
                    " \t- One balance reserve operation. O(X)",
                    " \t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                    " - Events:",
                    " \t- One event for vouch.",
                    " \t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                    "",
                    " Total Complexity: O(M + B + C + logM + logB + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "unvouch",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "pos",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " As a vouching member, unvouch a bid. This only works while vouched user is",
                    " only a bidder (and not a candidate).",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a vouching member.",
                    "",
                    " Parameters:",
                    " - `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
                    "",
                    " # <weight>",
                    " Key: B (len of bids)",
                    " - One storage read O(1) to check the signer is a vouching member.",
                    " - One storage mutate to retrieve and update the bids. O(B)",
                    " - One vouching storage removal. O(1)",
                    " - One event.",
                    "",
                    " Total Complexity: O(B)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vote",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "candidate",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "approve",
                        ty: "bool",
                    },
                ],
                documentation: [
                    " As a member, vote on a candidate.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a member.",
                    "",
                    " Parameters:",
                    " - `candidate`: The candidate that the member would like to bid on.",
                    " - `approve`: A boolean which says if the candidate should be",
                    "              approved (`true`) or rejected (`false`).",
                    "",
                    " # <weight>",
                    " Key: C (len of candidates), M (len of members)",
                    " - One storage read O(M) and O(log M) search to check user is a member.",
                    " - One account lookup.",
                    " - One storage read O(C) and O(C) search to check that user is a candidate.",
                    " - One storage write to add vote to votes. O(1)",
                    " - One event.",
                    "",
                    " Total Complexity: O(M + logM + C)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "defender_vote",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "approve",
                        ty: "bool",
                    },
                ],
                documentation: [
                    " As a member, vote on the defender.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a member.",
                    "",
                    " Parameters:",
                    " - `approve`: A boolean which says if the candidate should be",
                    " approved (`true`) or rejected (`false`).",
                    "",
                    " # <weight>",
                    " - Key: M (len of members)",
                    " - One storage read O(M) and O(log M) search to check user is a member.",
                    " - One storage write to add vote to votes. O(1)",
                    " - One event.",
                    "",
                    " Total Complexity: O(M + logM)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "payout",
                arguments: [],
                documentation: [
                    " Transfer the first matured payout for the sender and remove it from the records.",
                    "",
                    " NOTE: This extrinsic needs to be called multiple times to claim multiple matured payouts.",
                    "",
                    " Payment: The member will receive a payment equal to their first matured",
                    " payout to their free balance.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a member with",
                    " payouts remaining.",
                    "",
                    " # <weight>",
                    " Key: M (len of members), P (number of payouts for a particular member)",
                    " - One storage read O(M) and O(log M) search to check signer is a member.",
                    " - One storage read O(P) to get all payouts for a member.",
                    " - One storage read O(1) to get the current block number.",
                    " - One currency transfer call. O(X)",
                    " - One storage write or removal to update the member\'s payouts. O(P)",
                    "",
                    " Total Complexity: O(M + logM + P + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "found",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "founder",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "max_members",
                        ty: "u32",
                    },
                    FunctionArgumentMetadata {
                        name: "rules",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Found the society.",
                    "",
                    " This is done as a discrete action in order to allow for the",
                    " module to be included into a running chain and can only be done once.",
                    "",
                    " The dispatch origin for this call must be from the _FounderSetOrigin_.",
                    "",
                    " Parameters:",
                    " - `founder` - The first member and head of the newly founded society.",
                    " - `max_members` - The initial max number of members for the society.",
                    " - `rules` - The rules of this society concerning membership.",
                    "",
                    " # <weight>",
                    " - Two storage mutates to set `Head` and `Founder`. O(1)",
                    " - One storage write to add the first member to society. O(1)",
                    " - One event.",
                    "",
                    " Total Complexity: O(1)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "unfound",
                arguments: [],
                documentation: [
                    " Annul the founding of the society.",
                    "",
                    " The dispatch origin for this call must be Signed, and the signing account must be both",
                    " the `Founder` and the `Head`. This implies that it may only be done when there is one",
                    " member.",
                    "",
                    " # <weight>",
                    " - Two storage reads O(1).",
                    " - Four storage removals O(1).",
                    " - One event.",
                    "",
                    " Total Complexity: O(1)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "judge_suspended_member",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "forgive",
                        ty: "bool",
                    },
                ],
                documentation: [
                    " Allow suspension judgement origin to make judgement on a suspended member.",
                    "",
                    " If a suspended member is forgiven, we simply add them back as a member, not affecting",
                    " any of the existing storage items for that member.",
                    "",
                    " If a suspended member is rejected, remove all associated storage items, including",
                    " their payouts, and remove any vouched bids they currently have.",
                    "",
                    " The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                    "",
                    " Parameters:",
                    " - `who` - The suspended member to be judged.",
                    " - `forgive` - A boolean representing whether the suspension judgement origin",
                    "               forgives (`true`) or rejects (`false`) a suspended member.",
                    "",
                    " # <weight>",
                    " Key: B (len of bids), M (len of members)",
                    " - One storage read to check `who` is a suspended member. O(1)",
                    " - Up to one storage write O(M) with O(log M) binary search to add a member back to society.",
                    " - Up to 3 storage removals O(1) to clean up a removed member.",
                    " - Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
                    " - Up to one additional event if unvouch takes place.",
                    " - One storage removal. O(1)",
                    " - One event for the judgement.",
                    "",
                    " Total Complexity: O(M + logM + B)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "judge_suspended_candidate",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "judgement",
                        ty: "Judgement",
                    },
                ],
                documentation: [
                    " Allow suspended judgement origin to make judgement on a suspended candidate.",
                    "",
                    " If the judgement is `Approve`, we add them to society as a member with the appropriate",
                    " payment for joining society.",
                    "",
                    " If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
                    " to the society treasury, or we ban the voucher from vouching again.",
                    "",
                    " If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
                    " through the induction process again.",
                    "",
                    " The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                    "",
                    " Parameters:",
                    " - `who` - The suspended candidate to be judged.",
                    " - `judgement` - `Approve`, `Reject`, or `Rebid`.",
                    "",
                    " # <weight>",
                    " Key: B (len of bids), M (len of members), X (balance action)",
                    " - One storage read to check `who` is a suspended candidate.",
                    " - One storage removal of the suspended candidate.",
                    " - Approve Logic",
                    " \t- One storage read to get the available pot to pay users with. O(1)",
                    " \t- One storage write to update the available pot. O(1)",
                    " \t- One storage read to get the current block number. O(1)",
                    " \t- One storage read to get all members. O(M)",
                    " \t- Up to one unreserve currency action.",
                    " \t- Up to two new storage writes to payouts.",
                    " \t- Up to one storage write with O(log M) binary search to add a member to society.",
                    " - Reject Logic",
                    " \t- Up to one repatriate reserved currency action. O(X)",
                    " \t- Up to one storage write to ban the vouching member from vouching again.",
                    " - Rebid Logic",
                    " \t- Storage mutate with O(log B) binary search to place the user back into bids.",
                    " - Up to one additional event if unvouch takes place.",
                    " - One storage removal.",
                    " - One event for the judgement.",
                    "",
                    " Total Complexity: O(M + logM + B + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_max_members",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "max",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " Allows root origin to change the maximum number of members in society.",
                    " Max membership count must be greater than 1.",
                    "",
                    " The dispatch origin for this call must be from _ROOT_.",
                    "",
                    " Parameters:",
                    " - `max` - The maximum number of members for the society.",
                    "",
                    " # <weight>",
                    " - One storage write to update the max. O(1)",
                    " - One event.",
                    "",
                    " Total Complexity: O(1)",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Founded",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " The society is founded by the given identity. \\[founder\\]",
                ],
            },
            EventMetadata {
                name: "Bid",
                arguments: [
                    "AccountId",
                    "Balance",
                ],
                documentation: [
                    " A membership bid just happened. The given account is the candidate\'s ID and their offer",
                    " is the second. \\[candidate_id, offer\\]",
                ],
            },
            EventMetadata {
                name: "Vouch",
                arguments: [
                    "AccountId",
                    "Balance",
                    "AccountId",
                ],
                documentation: [
                    " A membership bid just happened by vouching. The given account is the candidate\'s ID and",
                    " their offer is the second. The vouching party is the third. \\[candidate_id, offer, vouching\\]",
                ],
            },
            EventMetadata {
                name: "AutoUnbid",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[candidate\\] was dropped (due to an excess of bids in the system).",
                ],
            },
            EventMetadata {
                name: "Unbid",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[candidate\\] was dropped (by their request).",
                ],
            },
            EventMetadata {
                name: "Unvouch",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[candidate\\] was dropped (by request of who vouched for them).",
                ],
            },
            EventMetadata {
                name: "Inducted",
                arguments: [
                    "AccountId",
                    "Vec<AccountId>",
                ],
                documentation: [
                    " A group of candidates have been inducted. The batch\'s primary is the first value, the",
                    " batch in full is the second. \\[primary, candidates\\]",
                ],
            },
            EventMetadata {
                name: "SuspendedMemberJudgement",
                arguments: [
                    "AccountId",
                    "bool",
                ],
                documentation: [
                    " A suspended member has been judged. \\[who, judged\\]",
                ],
            },
            EventMetadata {
                name: "CandidateSuspended",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[candidate\\] has been suspended",
                ],
            },
            EventMetadata {
                name: "MemberSuspended",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[member\\] has been suspended",
                ],
            },
            EventMetadata {
                name: "Challenged",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A \\[member\\] has been challenged",
                ],
            },
            EventMetadata {
                name: "Vote",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "bool",
                ],
                documentation: [
                    " A vote has been placed \\[candidate, voter, vote\\]",
                ],
            },
            EventMetadata {
                name: "DefenderVote",
                arguments: [
                    "AccountId",
                    "bool",
                ],
                documentation: [
                    " A vote has been placed for a defending member \\[voter, vote\\]",
                ],
            },
            EventMetadata {
                name: "NewMaxMembers",
                arguments: [
                    "u32",
                ],
                documentation: [
                    " A new \\[max\\] member count has been set",
                ],
            },
            EventMetadata {
                name: "Unfounded",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " Society is unfounded. \\[founder\\]",
                ],
            },
            EventMetadata {
                name: "Deposit",
                arguments: [
                    "Balance",
                ],
                documentation: [
                    " Some funds were deposited into the society account. \\[value\\]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "CandidateDeposit",
            ty: "BalanceOf<T, I>",
            value: [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The minimum amount of a deposit required for a bid to be made.",
            ],
        },
        ModuleConstantMetadata {
            name: "WrongSideDeduction",
            ty: "BalanceOf<T, I>",
            value: [
                0,
                148,
                53,
                119,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount of the unpaid reward that gets deducted in the case that either a skeptic",
                " doesn\'t vote or someone votes in the wrong way.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxStrikes",
            ty: "u32",
            value: [
                10,
                0,
                0,
                0,
            ],
            documentation: [
                " The number of times a member may vote the wrong way (or not at all, when they are a skeptic)",
                " before they become suspended.",
            ],
        },
        ModuleConstantMetadata {
            name: "PeriodSpend",
            ty: "BalanceOf<T, I>",
            value: [
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount of incentive paid within each period. Doesn\'t include VoterTip.",
            ],
        },
        ModuleConstantMetadata {
            name: "RotationPeriod",
            ty: "T::BlockNumber",
            value: [
                128,
                187,
                0,
                0,
            ],
            documentation: [
                " The number of blocks between candidate/membership rotation periods.",
            ],
        },
        ModuleConstantMetadata {
            name: "ChallengePeriod",
            ty: "T::BlockNumber",
            value: [
                192,
                137,
                1,
                0,
            ],
            documentation: [
                " The number of blocks between membership challenges.",
            ],
        },
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                115,
                111,
                99,
                105,
                101,
            ],
            documentation: [
                " The societies\'s module id",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "BadPosition",
            documentation: [
                " An incorrect position was provided.",
            ],
        },
        ErrorMetadata {
            name: "NotMember",
            documentation: [
                " User is not a member.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyMember",
            documentation: [
                " User is already a member.",
            ],
        },
        ErrorMetadata {
            name: "Suspended",
            documentation: [
                " User is suspended.",
            ],
        },
        ErrorMetadata {
            name: "NotSuspended",
            documentation: [
                " User is not suspended.",
            ],
        },
        ErrorMetadata {
            name: "NoPayout",
            documentation: [
                " Nothing to payout.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyFounded",
            documentation: [
                " Society already founded.",
            ],
        },
        ErrorMetadata {
            name: "InsufficientPot",
            documentation: [
                " Not enough in pot to accept candidate.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyVouching",
            documentation: [
                " Member is already vouching or banned from vouching again.",
            ],
        },
        ErrorMetadata {
            name: "NotVouching",
            documentation: [
                " Member is not vouching.",
            ],
        },
        ErrorMetadata {
            name: "Head",
            documentation: [
                " Cannot remove the head of the chain.",
            ],
        },
        ErrorMetadata {
            name: "Founder",
            documentation: [
                " Cannot remove the founder.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyBid",
            documentation: [
                " User has already made a bid.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyCandidate",
            documentation: [
                " User is already a candidate.",
            ],
        },
        ErrorMetadata {
            name: "NotCandidate",
            documentation: [
                " User is not a candidate.",
            ],
        },
        ErrorMetadata {
            name: "MaxMembers",
            documentation: [
                " Too many members in the society.",
            ],
        },
        ErrorMetadata {
            name: "NotFounder",
            documentation: [
                " The caller is not the founder.",
            ],
        },
        ErrorMetadata {
            name: "NotHead",
            documentation: [
                " The caller is not the head.",
            ],
        },
    ],
    index: 24,
}
 2020-11-21T11:59:29.599Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Recovery",
    storage: Some(
        StorageMetadata {
            prefix: "Recovery",
            entries: [
                StorageEntryMetadata {
                    name: "Recoverable",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "RecoveryConfig<T::BlockNumber, BalanceOf<T>, T::AccountId>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of recoverable accounts and their recovery configuration.",
                    ],
                },
                StorageEntryMetadata {
                    name: "ActiveRecoveries",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "T::AccountId",
                        key2: "T::AccountId",
                        value: "ActiveRecovery<T::BlockNumber, BalanceOf<T>, T::AccountId>",
                        key2_hasher: StorageHasher::Twox64Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Active recovery attempts.",
                        "",
                        " First account is the account to be recovered, and the second account",
                        " is the user trying to recover the account.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Proxy",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "T::AccountId",
                        value: "T::AccountId",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The list of allowed proxy accounts.",
                        "",
                        " Map from the user who can access it to the recovered account.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "as_recovered",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "account",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Send a call through a recovered account.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and registered to",
                    " be able to make calls on behalf of the recovered account.",
                    "",
                    " Parameters:",
                    " - `account`: The recovered account you want to make a call on-behalf-of.",
                    " - `call`: The call you want to make with the recovered account.",
                    "",
                    " # <weight>",
                    " - The weight of the `call` + 10,000.",
                    " - One storage lookup to check account is recovered by `who`. O(1)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_recovered",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "lost",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "rescuer",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Allow ROOT to bypass the recovery process and set an a rescuer account",
                    " for a lost account directly.",
                    "",
                    " The dispatch origin for this call must be _ROOT_.",
                    "",
                    " Parameters:",
                    " - `lost`: The \"lost account\" to be recovered.",
                    " - `rescuer`: The \"rescuer account\" which can call as the lost account.",
                    "",
                    " # <weight>",
                    " - One storage write O(1)",
                    " - One event",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "create_recovery",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "friends",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "threshold",
                        ty: "u16",
                    },
                    FunctionArgumentMetadata {
                        name: "delay_period",
                        ty: "T::BlockNumber",
                    },
                ],
                documentation: [
                    " Create a recovery configuration for your account. This makes your account recoverable.",
                    "",
                    " Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                    " will be reserved for storing the recovery configuration. This deposit is returned",
                    " in full when the user calls `remove_recovery`.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `friends`: A list of friends you trust to vouch for recovery attempts.",
                    "   Should be ordered and contain no duplicate values.",
                    " - `threshold`: The number of friends that must vouch for a recovery attempt",
                    "   before the account can be recovered. Should be less than or equal to",
                    "   the length of the list of friends.",
                    " - `delay_period`: The number of blocks after a recovery attempt is initialized",
                    "   that needs to pass before the account can be recovered.",
                    "",
                    " # <weight>",
                    " - Key: F (len of friends)",
                    " - One storage read to check that account is not already recoverable. O(1).",
                    " - A check that the friends list is sorted and unique. O(F)",
                    " - One currency reserve operation. O(X)",
                    " - One storage write. O(1). Codec O(F).",
                    " - One event.",
                    "",
                    " Total Complexity: O(F + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "initiate_recovery",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "account",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Initiate the process for recovering a recoverable account.",
                    "",
                    " Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                    " recovery process. This deposit will always be repatriated to the account",
                    " trying to be recovered. See `close_recovery`.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `account`: The lost account that you want to recover. This account",
                    "   needs to be recoverable (i.e. have a recovery configuration).",
                    "",
                    " # <weight>",
                    " - One storage read to check that account is recoverable. O(F)",
                    " - One storage read to check that this recovery process hasn\'t already started. O(1)",
                    " - One currency reserve operation. O(X)",
                    " - One storage read to get the current block number. O(1)",
                    " - One storage write. O(1).",
                    " - One event.",
                    "",
                    " Total Complexity: O(F + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "vouch_recovery",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "lost",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "rescuer",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                    " process for that account.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                    " for the recoverable account.",
                    "",
                    " Parameters:",
                    " - `lost`: The lost account that you want to recover.",
                    " - `rescuer`: The account trying to rescue the lost account that you",
                    "   want to vouch for.",
                    "",
                    " The combination of these two parameters must point to an active recovery",
                    " process.",
                    "",
                    " # <weight>",
                    " Key: F (len of friends in config), V (len of vouching friends)",
                    " - One storage read to get the recovery configuration. O(1), Codec O(F)",
                    " - One storage read to get the active recovery process. O(1), Codec O(V)",
                    " - One binary search to confirm caller is a friend. O(logF)",
                    " - One binary search to confirm caller has not already vouched. O(logV)",
                    " - One storage write. O(1), Codec O(V).",
                    " - One event.",
                    "",
                    " Total Complexity: O(F + logF + V + logV)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "claim_recovery",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "account",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Allow a successful rescuer to claim their recovered account.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                    " who has successfully completed the account recovery process: collected",
                    " `threshold` or more vouches, waited `delay_period` blocks since initiation.",
                    "",
                    " Parameters:",
                    " - `account`: The lost account that you want to claim has been successfully",
                    "   recovered by you.",
                    "",
                    " # <weight>",
                    " Key: F (len of friends in config), V (len of vouching friends)",
                    " - One storage read to get the recovery configuration. O(1), Codec O(F)",
                    " - One storage read to get the active recovery process. O(1), Codec O(V)",
                    " - One storage read to get the current block number. O(1)",
                    " - One storage write. O(1), Codec O(V).",
                    " - One event.",
                    "",
                    " Total Complexity: O(F + V)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "close_recovery",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "rescuer",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " As the controller of a recoverable account, close an active recovery",
                    " process for your account.",
                    "",
                    " Payment: By calling this function, the recoverable account will receive",
                    " the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and must be a",
                    " recoverable account with an active recovery process for it.",
                    "",
                    " Parameters:",
                    " - `rescuer`: The account trying to rescue this recoverable account.",
                    "",
                    " # <weight>",
                    " Key: V (len of vouching friends)",
                    " - One storage read/remove to get the active recovery process. O(1), Codec O(V)",
                    " - One balance call to repatriate reserved. O(X)",
                    " - One event.",
                    "",
                    " Total Complexity: O(V + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_recovery",
                arguments: [],
                documentation: [
                    " Remove the recovery process for your account. Recovered accounts are still accessible.",
                    "",
                    " NOTE: The user must make sure to call `close_recovery` on all active",
                    " recovery attempts before calling this function else it will fail.",
                    "",
                    " Payment: By calling this function the recoverable account will unreserve",
                    " their recovery configuration deposit.",
                    " (`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                    "",
                    " The dispatch origin for this call must be _Signed_ and must be a",
                    " recoverable account (i.e. has a recovery configuration).",
                    "",
                    " # <weight>",
                    " Key: F (len of friends)",
                    " - One storage read to get the prefix iterator for active recoveries. O(1)",
                    " - One storage read/remove to get the recovery configuration. O(1), Codec O(F)",
                    " - One balance call to unreserved. O(X)",
                    " - One event.",
                    "",
                    " Total Complexity: O(F + X)",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "cancel_recovered",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "account",
                        ty: "T::AccountId",
                    },
                ],
                documentation: [
                    " Cancel the ability to use `as_recovered` for `account`.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and registered to",
                    " be able to make calls on behalf of the recovered account.",
                    "",
                    " Parameters:",
                    " - `account`: The recovered account you are able to call on-behalf-of.",
                    "",
                    " # <weight>",
                    " - One storage mutation to check account is recovered by `who`. O(1)",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "RecoveryCreated",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A recovery process has been set up for an \\[account\\].",
                ],
            },
            EventMetadata {
                name: "RecoveryInitiated",
                arguments: [
                    "AccountId",
                    "AccountId",
                ],
                documentation: [
                    " A recovery process has been initiated for lost account by rescuer account.",
                    " \\[lost, rescuer\\]",
                ],
            },
            EventMetadata {
                name: "RecoveryVouched",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "AccountId",
                ],
                documentation: [
                    " A recovery process for lost account by rescuer account has been vouched for by sender.",
                    " \\[lost, rescuer, sender\\]",
                ],
            },
            EventMetadata {
                name: "RecoveryClosed",
                arguments: [
                    "AccountId",
                    "AccountId",
                ],
                documentation: [
                    " A recovery process for lost account by rescuer account has been closed.",
                    " \\[lost, rescuer\\]",
                ],
            },
            EventMetadata {
                name: "AccountRecovered",
                arguments: [
                    "AccountId",
                    "AccountId",
                ],
                documentation: [
                    " Lost account has been successfully recovered by rescuer account.",
                    " \\[lost, rescuer\\]",
                ],
            },
            EventMetadata {
                name: "RecoveryRemoved",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " A recovery process has been removed for an \\[account\\].",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ConfigDepositBase",
            ty: "BalanceOf<T>",
            value: [
                0,
                242,
                5,
                42,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
            ],
        },
        ModuleConstantMetadata {
            name: "FriendDepositFactor",
            ty: "BalanceOf<T>",
            value: [
                128,
                240,
                250,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount of currency needed per additional user when creating a recovery configuration.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxFriends",
            ty: "u16",
            value: [
                9,
                0,
            ],
            documentation: [
                " The maximum amount of friends allowed in a recovery configuration.",
            ],
        },
        ModuleConstantMetadata {
            name: "RecoveryDeposit",
            ty: "BalanceOf<T>",
            value: [
                0,
                242,
                5,
                42,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The base amount of currency needed to reserve for starting a recovery.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "NotAllowed",
            documentation: [
                " User is not allowed to make a call on behalf of this account",
            ],
        },
        ErrorMetadata {
            name: "ZeroThreshold",
            documentation: [
                " Threshold must be greater than zero",
            ],
        },
        ErrorMetadata {
            name: "NotEnoughFriends",
            documentation: [
                " Friends list must be greater than zero and threshold",
            ],
        },
        ErrorMetadata {
            name: "MaxFriends",
            documentation: [
                " Friends list must be less than max friends",
            ],
        },
        ErrorMetadata {
            name: "NotSorted",
            documentation: [
                " Friends list must be sorted and free of duplicates",
            ],
        },
        ErrorMetadata {
            name: "NotRecoverable",
            documentation: [
                " This account is not set up for recovery",
            ],
        },
        ErrorMetadata {
            name: "AlreadyRecoverable",
            documentation: [
                " This account is already set up for recovery",
            ],
        },
        ErrorMetadata {
            name: "AlreadyStarted",
            documentation: [
                " A recovery process has already started for this account",
            ],
        },
        ErrorMetadata {
            name: "NotStarted",
            documentation: [
                " A recovery process has not started for this rescuer",
            ],
        },
        ErrorMetadata {
            name: "NotFriend",
            documentation: [
                " This account is not a friend who can vouch",
            ],
        },
        ErrorMetadata {
            name: "DelayPeriod",
            documentation: [
                " The friend must wait until the delay period to vouch for this recovery",
            ],
        },
        ErrorMetadata {
            name: "AlreadyVouched",
            documentation: [
                " This user has already vouched for this recovery",
            ],
        },
        ErrorMetadata {
            name: "Threshold",
            documentation: [
                " The threshold for recovering this account has not been met",
            ],
        },
        ErrorMetadata {
            name: "StillActive",
            documentation: [
                " There are still active recovery attempts that need to be closed",
            ],
        },
        ErrorMetadata {
            name: "Overflow",
            documentation: [
                " There was an overflow in a calculation",
            ],
        },
        ErrorMetadata {
            name: "AlreadyProxy",
            documentation: [
                " This account is already set up for recovery",
            ],
        },
    ],
    index: 25,
}
 2020-11-21T11:59:29.612Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Scheduler",
    storage: Some(
        StorageMetadata {
            prefix: "Scheduler",
            entries: [
                StorageEntryMetadata {
                    name: "Agenda",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::BlockNumber",
                        value: "Vec<Option<Scheduled<<T as Trait>::Call, T::BlockNumber, T::\nPalletsOrigin, T::AccountId>>>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Items to be executed, indexed by the block number that they should be executed on.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Lookup",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "Vec<u8>",
                        value: "TaskAddress<T::BlockNumber>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Lookup from identity to the block number and index of the task.",
                    ],
                },
                StorageEntryMetadata {
                    name: "StorageVersion",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Releases",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Storage version of the pallet.",
                        "",
                        " New networks start with last version.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "schedule",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "when",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "maybe_periodic",
                        ty: "Option<schedule::Period<T::BlockNumber>>",
                    },
                    FunctionArgumentMetadata {
                        name: "priority",
                        ty: "schedule::Priority",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Anonymously schedule a task.",
                    "",
                    " # <weight>",
                    " - S = Number of already scheduled calls",
                    " - Base Weight: 22.29 + .126 * S µs",
                    " - DB Weight:",
                    "     - Read: Agenda",
                    "     - Write: Agenda",
                    " - Will use base weight of 25 which should be good for up to 30 scheduled calls",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "cancel",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "when",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "u32",
                    },
                ],
                documentation: [
                    " Cancel an anonymously scheduled task.",
                    "",
                    " # <weight>",
                    " - S = Number of already scheduled calls",
                    " - Base Weight: 22.15 + 2.869 * S µs",
                    " - DB Weight:",
                    "     - Read: Agenda",
                    "     - Write: Agenda, Lookup",
                    " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "schedule_named",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "id",
                        ty: "Vec<u8>",
                    },
                    FunctionArgumentMetadata {
                        name: "when",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "maybe_periodic",
                        ty: "Option<schedule::Period<T::BlockNumber>>",
                    },
                    FunctionArgumentMetadata {
                        name: "priority",
                        ty: "schedule::Priority",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Schedule a named task.",
                    "",
                    " # <weight>",
                    " - S = Number of already scheduled calls",
                    " - Base Weight: 29.6 + .159 * S µs",
                    " - DB Weight:",
                    "     - Read: Agenda, Lookup",
                    "     - Write: Agenda, Lookup",
                    " - Will use base weight of 35 which should be good for more than 30 scheduled calls",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "cancel_named",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "id",
                        ty: "Vec<u8>",
                    },
                ],
                documentation: [
                    " Cancel a named scheduled task.",
                    "",
                    " # <weight>",
                    " - S = Number of already scheduled calls",
                    " - Base Weight: 24.91 + 2.907 * S µs",
                    " - DB Weight:",
                    "     - Read: Agenda, Lookup",
                    "     - Write: Agenda, Lookup",
                    " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "schedule_after",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "after",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "maybe_periodic",
                        ty: "Option<schedule::Period<T::BlockNumber>>",
                    },
                    FunctionArgumentMetadata {
                        name: "priority",
                        ty: "schedule::Priority",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Anonymously schedule a task after a delay.",
                    "",
                    " # <weight>",
                    " Same as [`schedule`].",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "schedule_named_after",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "id",
                        ty: "Vec<u8>",
                    },
                    FunctionArgumentMetadata {
                        name: "after",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "maybe_periodic",
                        ty: "Option<schedule::Period<T::BlockNumber>>",
                    },
                    FunctionArgumentMetadata {
                        name: "priority",
                        ty: "schedule::Priority",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Schedule a named task after a delay.",
                    "",
                    " # <weight>",
                    " Same as [`schedule_named`].",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Scheduled",
                arguments: [
                    "BlockNumber",
                    "u32",
                ],
                documentation: [
                    " Scheduled some task. \\[when, index\\]",
                ],
            },
            EventMetadata {
                name: "Canceled",
                arguments: [
                    "BlockNumber",
                    "u32",
                ],
                documentation: [
                    " Canceled some task. \\[when, index\\]",
                ],
            },
            EventMetadata {
                name: "Dispatched",
                arguments: [
                    "TaskAddress<BlockNumber>",
                    "Option<Vec<u8>>",
                    "DispatchResult",
                ],
                documentation: [
                    " Dispatched some task. \\[task, id, result\\]",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "FailedToSchedule",
            documentation: [
                " Failed to schedule a call",
            ],
        },
        ErrorMetadata {
            name: "FailedToCancel",
            documentation: [
                " Failed to cancel a scheduled call",
            ],
        },
        ErrorMetadata {
            name: "TargetBlockNumberInPast",
            documentation: [
                " Given target block number is in the past.",
            ],
        },
    ],
    index: 26,
}
 2020-11-21T11:59:29.612Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Sudo",
    storage: Some(
        StorageMetadata {
            prefix: "Sudo",
            entries: [
                StorageEntryMetadata {
                    name: "Key",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The `AccountId` of the sudo key.",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "sudo",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB write (event).",
                    " - Weight of derivative `call` execution + 10,000.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "sudo_unchecked_weight",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                    FunctionArgumentMetadata {
                        name: "_weight",
                        ty: "Weight",
                    },
                ],
                documentation: [
                    " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                    " This function does not check the weight of the call, and instead allows the",
                    " Sudo user to specify the weight of the call.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - The weight of this call is defined by the caller.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_key",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                ],
                documentation: [
                    " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB change.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "sudo_as",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "who",
                        ty: "<T::Lookup as StaticLookup>::Source",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                    " a given account.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " # <weight>",
                    " - O(1).",
                    " - Limited storage reads.",
                    " - One DB write (event).",
                    " - Weight of derivative `call` execution + 10,000.",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Sudid",
                arguments: [
                    "DispatchResult",
                ],
                documentation: [
                    " A sudo just took place. \\[result\\]",
                ],
            },
            EventMetadata {
                name: "KeyChanged",
                arguments: [
                    "AccountId",
                ],
                documentation: [
                    " The \\[sudoer\\] just switched identity; the old key is supplied.",
                ],
            },
            EventMetadata {
                name: "SudoAsDone",
                arguments: [
                    "bool",
                ],
                documentation: [
                    " A sudo just took place. \\[result\\]",
                ],
            },
        ],
    ),
    constants: [],
    errors: [
        ErrorMetadata {
            name: "RequireSudo",
            documentation: [
                " Sender must be the Sudo account",
            ],
        },
    ],
    index: 27,
}
 2020-11-21T11:59:29.613Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Proxy",
    storage: Some(
        StorageMetadata {
            prefix: "Proxy",
            entries: [
                StorageEntryMetadata {
                    name: "Proxies",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "(Vec<ProxyDefinition<T::AccountId, T::ProxyType, T::BlockNumber>>,\n BalanceOf<T>)",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The set of account proxies. Maps the account which has delegated to the accounts",
                        " which are being delegated to, together with the amount held on deposit.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Announcements",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Twox64Concat,
                        key: "T::AccountId",
                        value: "(Vec<Announcement<T::AccountId, CallHashOf<T>, T::BlockNumber>>,\n BalanceOf<T>)",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The announcements made by the proxy (key).",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "proxy",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "real",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "force_proxy_type",
                        ty: "Option<T::ProxyType>",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Dispatch the given `call` from an account that the sender is authorised for through",
                    " `add_proxy`.",
                    "",
                    " Removes any corresponding announcement(s).",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `real`: The account that the proxy will make a call on behalf of.",
                    " - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    " - `call`: The call to be made by the `real` account.",
                    "",
                    " # <weight>",
                    " Weight is a function of the number of proxies the user has (P).",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "add_proxy",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "delegate",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "proxy_type",
                        ty: "T::ProxyType",
                    },
                    FunctionArgumentMetadata {
                        name: "delay",
                        ty: "T::BlockNumber",
                    },
                ],
                documentation: [
                    " Register a proxy account for the sender that is able to make calls on its behalf.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `proxy`: The account that the `caller` would like to make a proxy.",
                    " - `proxy_type`: The permissions allowed for this proxy account.",
                    " - `delay`: The announcement period required of the initial proxy. Will generally be",
                    " zero.",
                    "",
                    " # <weight>",
                    " Weight is a function of the number of proxies the user has (P).",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_proxy",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "delegate",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "proxy_type",
                        ty: "T::ProxyType",
                    },
                    FunctionArgumentMetadata {
                        name: "delay",
                        ty: "T::BlockNumber",
                    },
                ],
                documentation: [
                    " Unregister a proxy account for the sender.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `proxy`: The account that the `caller` would like to remove as a proxy.",
                    " - `proxy_type`: The permissions currently enabled for the removed proxy account.",
                    "",
                    " # <weight>",
                    " Weight is a function of the number of proxies the user has (P).",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_proxies",
                arguments: [],
                documentation: [
                    " Unregister all proxy accounts for the sender.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                    " the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                    "",
                    " # <weight>",
                    " Weight is a function of the number of proxies the user has (P).",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "anonymous",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "proxy_type",
                        ty: "T::ProxyType",
                    },
                    FunctionArgumentMetadata {
                        name: "delay",
                        ty: "T::BlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "u16",
                    },
                ],
                documentation: [
                    " Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                    " initialize it with a proxy of `proxy_type` for `origin` sender.",
                    "",
                    " Requires a `Signed` origin.",
                    "",
                    " - `proxy_type`: The type of the proxy that the sender will be registered as over the",
                    " new account. This will almost always be the most permissive `ProxyType` possible to",
                    " allow for maximum flexibility.",
                    " - `index`: A disambiguation index, in case this is called multiple times in the same",
                    " transaction (e.g. with `utility::batch`). Unless you\'re using `batch` you probably just",
                    " want to use `0`.",
                    " - `delay`: The announcement period required of the initial proxy. Will generally be",
                    " zero.",
                    "",
                    " Fails with `Duplicate` if this has already been called in this transaction, from the",
                    " same sender, with the same parameters.",
                    "",
                    " Fails if there are insufficient funds to pay for deposit.",
                    "",
                    " # <weight>",
                    " Weight is a function of the number of proxies the user has (P).",
                    " # </weight>",
                    " TODO: Might be over counting 1 read",
                ],
            },
            FunctionMetadata {
                name: "kill_anonymous",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "spawner",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "proxy_type",
                        ty: "T::ProxyType",
                    },
                    FunctionArgumentMetadata {
                        name: "index",
                        ty: "u16",
                    },
                    FunctionArgumentMetadata {
                        name: "height",
                        ty: "Compact<T::BlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "ext_index",
                        ty: "Compact<u32>",
                    },
                ],
                documentation: [
                    " Removes a previously spawned anonymous proxy.",
                    "",
                    " WARNING: **All access to this account will be lost.** Any funds held in it will be",
                    " inaccessible.",
                    "",
                    " Requires a `Signed` origin, and the sender account must have been created by a call to",
                    " `anonymous` with corresponding parameters.",
                    "",
                    " - `spawner`: The account that originally called `anonymous` to create this account.",
                    " - `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                    " - `proxy_type`: The proxy type originally passed to `anonymous`.",
                    " - `height`: The height of the chain when the call to `anonymous` was processed.",
                    " - `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                    "",
                    " Fails with `NoPermission` in case the caller is not a previously created anonymous",
                    " account whose `anonymous` call has corresponding parameters.",
                    "",
                    " # <weight>",
                    " Weight is a function of the number of proxies the user has (P).",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "announce",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "real",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "call_hash",
                        ty: "CallHashOf<T>",
                    },
                ],
                documentation: [
                    " Publish the hash of a proxy-call that will be made in the future.",
                    "",
                    " This must be called some number of blocks before the corresponding `proxy` is attempted",
                    " if the delay associated with the proxy relationship is greater than zero.",
                    "",
                    " No more than `MaxPending` announcements may be made at any one time.",
                    "",
                    " This will take a deposit of `AnnouncementDepositFactor` as well as",
                    " `AnnouncementDepositBase` if there are no other pending announcements.",
                    "",
                    " The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                    "",
                    " Parameters:",
                    " - `real`: The account that the proxy will make a call on behalf of.",
                    " - `call_hash`: The hash of the call to be made by the `real` account.",
                    "",
                    " # <weight>",
                    " Weight is a function of:",
                    " - A: the number of announcements made.",
                    " - P: the number of proxies the user has.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_announcement",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "real",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "call_hash",
                        ty: "CallHashOf<T>",
                    },
                ],
                documentation: [
                    " Remove a given announcement.",
                    "",
                    " May be called by a proxy account to remove a call they previously announced and return",
                    " the deposit.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `real`: The account that the proxy will make a call on behalf of.",
                    " - `call_hash`: The hash of the call to be made by the `real` account.",
                    "",
                    " # <weight>",
                    " Weight is a function of:",
                    " - A: the number of announcements made.",
                    " - P: the number of proxies the user has.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "reject_announcement",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "delegate",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "call_hash",
                        ty: "CallHashOf<T>",
                    },
                ],
                documentation: [
                    " Remove the given announcement of a delegate.",
                    "",
                    " May be called by a target (proxied) account to remove a call that one of their delegates",
                    " (`delegate`) has announced they want to execute. The deposit is returned.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `delegate`: The account that previously announced the call.",
                    " - `call_hash`: The hash of the call to be made.",
                    "",
                    " # <weight>",
                    " Weight is a function of:",
                    " - A: the number of announcements made.",
                    " - P: the number of proxies the user has.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "proxy_announced",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "delegate",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "real",
                        ty: "T::AccountId",
                    },
                    FunctionArgumentMetadata {
                        name: "force_proxy_type",
                        ty: "Option<T::ProxyType>",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Dispatch the given `call` from an account that the sender is authorised for through",
                    " `add_proxy`.",
                    "",
                    " Removes any corresponding announcement(s).",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " Parameters:",
                    " - `real`: The account that the proxy will make a call on behalf of.",
                    " - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    " - `call`: The call to be made by the `real` account.",
                    "",
                    " # <weight>",
                    " Weight is a function of:",
                    " - A: the number of announcements made.",
                    " - P: the number of proxies the user has.",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "ProxyExecuted",
                arguments: [
                    "DispatchResult",
                ],
                documentation: [
                    " A proxy was executed correctly, with the given \\[result\\].",
                ],
            },
            EventMetadata {
                name: "AnonymousCreated",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "ProxyType",
                    "u16",
                ],
                documentation: [
                    " Anonymous account has been created by new proxy with given",
                    " disambiguation index and proxy type. \\[anonymous, who, proxy_type, disambiguation_index\\]",
                ],
            },
            EventMetadata {
                name: "Announced",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "Hash",
                ],
                documentation: [
                    " An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ProxyDepositBase",
            ty: "BalanceOf<T>",
            value: [
                32,
                48,
                49,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The base amount of currency needed to reserve for creating a proxy.",
            ],
        },
        ModuleConstantMetadata {
            name: "ProxyDepositFactor",
            ty: "BalanceOf<T>",
            value: [
                228,
                12,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount of currency needed per proxy added.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxProxies",
            ty: "u16",
            value: [
                32,
                0,
            ],
            documentation: [
                " The maximum amount of proxies allowed for a single account.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxPending",
            ty: "u32",
            value: [
                32,
                0,
                0,
                0,
            ],
            documentation: [
                " `MaxPending` metadata shadow.",
            ],
        },
        ModuleConstantMetadata {
            name: "AnnouncementDepositBase",
            ty: "BalanceOf<T>",
            value: [
                32,
                48,
                49,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " `AnnouncementDepositBase` metadata shadow.",
            ],
        },
        ModuleConstantMetadata {
            name: "AnnouncementDepositFactor",
            ty: "BalanceOf<T>",
            value: [
                200,
                25,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " `AnnouncementDepositFactor` metadata shadow.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "TooMany",
            documentation: [
                " There are too many proxies registered or too many announcements pending.",
            ],
        },
        ErrorMetadata {
            name: "NotFound",
            documentation: [
                " Proxy registration not found.",
            ],
        },
        ErrorMetadata {
            name: "NotProxy",
            documentation: [
                " Sender is not a proxy of the account to be proxied.",
            ],
        },
        ErrorMetadata {
            name: "Unproxyable",
            documentation: [
                " A call which is incompatible with the proxy type\'s filter was attempted.",
            ],
        },
        ErrorMetadata {
            name: "Duplicate",
            documentation: [
                " Account is already a proxy.",
            ],
        },
        ErrorMetadata {
            name: "NoPermission",
            documentation: [
                " Call may not be made by proxy because it may escalate its privileges.",
            ],
        },
        ErrorMetadata {
            name: "Unannounced",
            documentation: [
                " Announcement, if made at all, was made too recently.",
            ],
        },
    ],
    index: 28,
}
 2020-11-21T11:59:29.626Z TRACE substrater::darwinia > ModuleMetadata {
    name: "Multisig",
    storage: Some(
        StorageMetadata {
            prefix: "Multisig",
            entries: [
                StorageEntryMetadata {
                    name: "Multisigs",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "T::AccountId",
                        key2: "[u8; 32]",
                        value: "Multisig<T::BlockNumber, BalanceOf<T>, T::AccountId>",
                        key2_hasher: StorageHasher::Blake2_128Concat,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of open multisig operations.",
                    ],
                },
                StorageEntryMetadata {
                    name: "Calls",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "[u8; 32]",
                        value: "(OpaqueCall, T::AccountId, BalanceOf<T>)",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "as_multi_threshold_1",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "other_signatories",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "Box<<T as Trait>::Call>",
                    },
                ],
                documentation: [
                    " Immediately dispatch a multi-signature call using a single approval from the caller.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `other_signatories`: The accounts (other than the sender) who are part of the",
                    " multi-signature, but do not participate in the approval process.",
                    " - `call`: The call to be executed.",
                    "",
                    " Result is equivalent to the dispatched result.",
                    "",
                    " # <weight>",
                    " O(Z + C) where Z is the length of the call and C its execution weight.",
                    " -------------------------------",
                    " - DB Weight: None",
                    " - Plus Call Weight",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "as_multi",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "threshold",
                        ty: "u16",
                    },
                    FunctionArgumentMetadata {
                        name: "other_signatories",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "maybe_timepoint",
                        ty: "Option<Timepoint<T::BlockNumber>>",
                    },
                    FunctionArgumentMetadata {
                        name: "call",
                        ty: "OpaqueCall",
                    },
                    FunctionArgumentMetadata {
                        name: "store_call",
                        ty: "bool",
                    },
                    FunctionArgumentMetadata {
                        name: "max_weight",
                        ty: "Weight",
                    },
                ],
                documentation: [
                    " Register approval for a dispatch to be made from a deterministic composite account if",
                    " approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    " If there are enough, then dispatch the call.",
                    "",
                    " Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    " `threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    " is cancelled.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                    " - `other_signatories`: The accounts (other than the sender) who can approve this",
                    " dispatch. May not be empty.",
                    " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    " not the first approval, then it must be `Some`, with the timepoint (block number and",
                    " transaction index) of the first approval transaction.",
                    " - `call`: The call to be executed.",
                    "",
                    " NOTE: Unless this is the final approval, you will generally want to use",
                    " `approve_as_multi` instead, since it only requires a hash of the call.",
                    "",
                    " Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                    " on success, result is `Ok` and the result from the interior call, if it was executed,",
                    " may be found in the deposited `MultisigExecuted` event.",
                    "",
                    " # <weight>",
                    " - `O(S + Z + Call)`.",
                    " - Up to one balance-reserve or unreserve operation.",
                    " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    " - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                    " - One encode & hash, both of complexity `O(S)`.",
                    " - Up to one binary search and insert (`O(logS + S)`).",
                    " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    " - One event.",
                    " - The weight of the `call`.",
                    " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                    "   deposit taken for its lifetime of",
                    "   `DepositBase + threshold * DepositFactor`.",
                    " -------------------------------",
                    " - DB Weight:",
                    "     - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                    "     - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                    " - Plus Call Weight",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "approve_as_multi",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "threshold",
                        ty: "u16",
                    },
                    FunctionArgumentMetadata {
                        name: "other_signatories",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "maybe_timepoint",
                        ty: "Option<Timepoint<T::BlockNumber>>",
                    },
                    FunctionArgumentMetadata {
                        name: "call_hash",
                        ty: "[u8; 32]",
                    },
                    FunctionArgumentMetadata {
                        name: "max_weight",
                        ty: "Weight",
                    },
                ],
                documentation: [
                    " Register approval for a dispatch to be made from a deterministic composite account if",
                    " approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    " Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    " `threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    " is cancelled.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                    " - `other_signatories`: The accounts (other than the sender) who can approve this",
                    " dispatch. May not be empty.",
                    " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    " not the first approval, then it must be `Some`, with the timepoint (block number and",
                    " transaction index) of the first approval transaction.",
                    " - `call_hash`: The hash of the call to be executed.",
                    "",
                    " NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                    "",
                    " # <weight>",
                    " - `O(S)`.",
                    " - Up to one balance-reserve or unreserve operation.",
                    " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    " - One encode & hash, both of complexity `O(S)`.",
                    " - Up to one binary search and insert (`O(logS + S)`).",
                    " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    " - One event.",
                    " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                    "   deposit taken for its lifetime of",
                    "   `DepositBase + threshold * DepositFactor`.",
                    " ----------------------------------",
                    " - DB Weight:",
                    "     - Read: Multisig Storage, [Caller Account]",
                    "     - Write: Multisig Storage, [Caller Account]",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "cancel_as_multi",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "threshold",
                        ty: "u16",
                    },
                    FunctionArgumentMetadata {
                        name: "other_signatories",
                        ty: "Vec<T::AccountId>",
                    },
                    FunctionArgumentMetadata {
                        name: "timepoint",
                        ty: "Timepoint<T::BlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "call_hash",
                        ty: "[u8; 32]",
                    },
                ],
                documentation: [
                    " Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                    " for this operation will be unreserved on success.",
                    "",
                    " The dispatch origin for this call must be _Signed_.",
                    "",
                    " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                    " - `other_signatories`: The accounts (other than the sender) who can approve this",
                    " dispatch. May not be empty.",
                    " - `timepoint`: The timepoint (block number and transaction index) of the first approval",
                    " transaction for this dispatch.",
                    " - `call_hash`: The hash of the call to be executed.",
                    "",
                    " # <weight>",
                    " - `O(S)`.",
                    " - Up to one balance-reserve or unreserve operation.",
                    " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    " - One encode & hash, both of complexity `O(S)`.",
                    " - One event.",
                    " - I/O: 1 read `O(S)`, one remove.",
                    " - Storage: removes one item.",
                    " ----------------------------------",
                    " - DB Weight:",
                    "     - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                    "     - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                    " # </weight>",
                ],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "NewMultisig",
                arguments: [
                    "AccountId",
                    "AccountId",
                    "CallHash",
                ],
                documentation: [
                    " A new multisig operation has begun. \\[approving, multisig, call_hash\\]",
                ],
            },
            EventMetadata {
                name: "MultisigApproval",
                arguments: [
                    "AccountId",
                    "Timepoint<BlockNumber>",
                    "AccountId",
                    "CallHash",
                ],
                documentation: [
                    " A multisig operation has been approved by someone.",
                    " \\[approving, timepoint, multisig, call_hash\\]",
                ],
            },
            EventMetadata {
                name: "MultisigExecuted",
                arguments: [
                    "AccountId",
                    "Timepoint<BlockNumber>",
                    "AccountId",
                    "CallHash",
                    "DispatchResult",
                ],
                documentation: [
                    " A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]",
                ],
            },
            EventMetadata {
                name: "MultisigCancelled",
                arguments: [
                    "AccountId",
                    "Timepoint<BlockNumber>",
                    "AccountId",
                    "CallHash",
                ],
                documentation: [
                    " A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "DepositBase",
            ty: "BalanceOf<T>",
            value: [
                96,
                79,
                49,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The base amount of currency needed to reserve for creating a multisig execution or to store",
                " a dispatch call for later.",
            ],
        },
        ModuleConstantMetadata {
            name: "DepositFactor",
            ty: "BalanceOf<T>",
            value: [
                128,
                12,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            documentation: [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
            ],
        },
        ModuleConstantMetadata {
            name: "MaxSignatories",
            ty: "u16",
            value: [
                100,
                0,
            ],
            documentation: [
                " The maximum amount of signatories allowed for a given multisig.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "MinimumThreshold",
            documentation: [
                " Threshold must be 2 or greater.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyApproved",
            documentation: [
                " Call is already approved by this signatory.",
            ],
        },
        ErrorMetadata {
            name: "NoApprovalsNeeded",
            documentation: [
                " Call doesn\'t need any (more) approvals.",
            ],
        },
        ErrorMetadata {
            name: "TooFewSignatories",
            documentation: [
                " There are too few signatories in the list.",
            ],
        },
        ErrorMetadata {
            name: "TooManySignatories",
            documentation: [
                " There are too many signatories in the list.",
            ],
        },
        ErrorMetadata {
            name: "SignatoriesOutOfOrder",
            documentation: [
                " The signatories were provided out of order; they should be ordered.",
            ],
        },
        ErrorMetadata {
            name: "SenderInSignatories",
            documentation: [
                " The sender was contained in the other signatories; it shouldn\'t be.",
            ],
        },
        ErrorMetadata {
            name: "NotFound",
            documentation: [
                " Multisig operation not found when attempting to cancel.",
            ],
        },
        ErrorMetadata {
            name: "NotOwner",
            documentation: [
                " Only the account that originally created the multisig is able to cancel it.",
            ],
        },
        ErrorMetadata {
            name: "NoTimepoint",
            documentation: [
                " No timepoint was given, yet the multisig operation is already underway.",
            ],
        },
        ErrorMetadata {
            name: "WrongTimepoint",
            documentation: [
                " A different timepoint was given to the multisig operation that is underway.",
            ],
        },
        ErrorMetadata {
            name: "UnexpectedTimepoint",
            documentation: [
                " A timepoint was given, yet no multisig operation is underway.",
            ],
        },
        ErrorMetadata {
            name: "WeightTooLow",
            documentation: [
                " The maximum weight information provided was too low.",
            ],
        },
        ErrorMetadata {
            name: "AlreadyStored",
            documentation: [
                " The data to be stored is already stored.",
            ],
        },
    ],
    index: 29,
}
 2020-11-21T11:59:29.633Z TRACE substrater::darwinia > ModuleMetadata {
    name: "CrabBacking",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaCrabBacking",
            entries: [],
        },
    ),
    calls: None,
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                99,
                114,
                97,
                98,
                107,
            ],
            documentation: [],
        },
    ],
    errors: [],
    index: 30,
}
 2020-11-21T11:59:29.634Z TRACE substrater::darwinia > ModuleMetadata {
    name: "EthereumBacking",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaEthereumBacking",
            entries: [
                StorageEntryMetadata {
                    name: "VerifiedProof",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "EthereumTransactionIndex",
                        value: "bool",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "TokenRedeemAddress",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EthereumAddress",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "DepositRedeemAddress",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EthereumAddress",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "RingTokenAddress",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EthereumAddress",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "KtonTokenAddress",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EthereumAddress",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "RedeemStatus",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        1,
                    ],
                    documentation: [],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "redeem",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "act",
                        ty: "RedeemFor",
                    },
                    FunctionArgumentMetadata {
                        name: "proof",
                        ty: "EthereumReceiptProofThing<T>",
                    },
                ],
                documentation: [
                    " Redeem balances",
                    "",
                    " # <weight>",
                    " - `O(1)`",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_token_redeem_address",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "EthereumAddress",
                    },
                ],
                documentation: [
                    " Set a new ring redeem address.",
                    "",
                    " The dispatch origin of this call must be _Root_.",
                    "",
                    " - `new`: The new ring redeem address.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_deposit_redeem_address",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "EthereumAddress",
                    },
                ],
                documentation: [
                    " Set a new deposit redeem address.",
                    "",
                    " The dispatch origin of this call must be _Root_.",
                    "",
                    " - `new`: The new deposit redeem address.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_redeem_status",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "status",
                        ty: "bool",
                    },
                ],
                documentation: [],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "RedeemRing",
                arguments: [
                    "AccountId",
                    "Balance",
                    "EthereumTransactionIndex",
                ],
                documentation: [
                    " Some one redeem some *RING*. [account, amount, transaction index]",
                ],
            },
            EventMetadata {
                name: "RedeemKton",
                arguments: [
                    "AccountId",
                    "Balance",
                    "EthereumTransactionIndex",
                ],
                documentation: [
                    " Some one redeem some *KTON*. [account, amount, transaction index]",
                ],
            },
            EventMetadata {
                name: "RedeemDeposit",
                arguments: [
                    "AccountId",
                    "DepositId",
                    "RingBalance",
                    "EthereumTransactionIndex",
                ],
                documentation: [
                    " Some one redeem a deposit. [account, deposit id, amount, transaction index]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                101,
                116,
                104,
                98,
                107,
            ],
            documentation: [
                " The treasury\'s module id, used for deriving its sovereign account ID.",
            ],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "AddrLenMis",
            documentation: [
                " Address Length - MISMATCHED",
            ],
        },
        ErrorMetadata {
            name: "PubkeyPrefixMis",
            documentation: [
                " Pubkey Prefix - MISMATCHED",
            ],
        },
        ErrorMetadata {
            name: "BytesCF",
            documentation: [
                " Bytes - CONVERSION FAILED",
            ],
        },
        ErrorMetadata {
            name: "IntCF",
            documentation: [
                " Int - CONVERSION FAILED",
            ],
        },
        ErrorMetadata {
            name: "AddressCF",
            documentation: [
                " Address - CONVERSION FAILED",
            ],
        },
        ErrorMetadata {
            name: "AssetAR",
            documentation: [
                " Asset - ALREADY REDEEMED",
            ],
        },
        ErrorMetadata {
            name: "ReceiptProofInv",
            documentation: [
                " EthereumReceipt Proof - INVALID",
            ],
        },
        ErrorMetadata {
            name: "EthLogPF",
            documentation: [
                " Eth Log - PARSING FAILED",
            ],
        },
        ErrorMetadata {
            name: "KtonLockedNSBA",
            documentation: [
                " *KTON* Locked - NO SUFFICIENT BACKING ASSETS",
            ],
        },
        ErrorMetadata {
            name: "RingLockedNSBA",
            documentation: [
                " *RING* Locked - NO SUFFICIENT BACKING ASSETS",
            ],
        },
        ErrorMetadata {
            name: "LogEntryNE",
            documentation: [
                " Log Entry - NOT EXISTED",
            ],
        },
        ErrorMetadata {
            name: "RedeemDis",
            documentation: [
                " Redeem - DISABLED",
            ],
        },
    ],
    index: 31,
}
 2020-11-21T11:59:29.640Z TRACE substrater::darwinia > ModuleMetadata {
    name: "EthereumRelay",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaEthereumRelay",
            entries: [
                StorageEntryMetadata {
                    name: "ConfirmedHeaderParcels",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "EthereumBlockNumber",
                        value: "EthereumRelayHeaderParcel",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Confirmed ethereum header parcel",
                    ],
                },
                StorageEntryMetadata {
                    name: "ConfirmedBlockNumbers",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<EthereumBlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Confirmed Ethereum block numbers",
                        "",
                        " The order are from small to large",
                    ],
                },
                StorageEntryMetadata {
                    name: "BestConfirmedBlockNumber",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EthereumBlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The highest ethereum block number that record in darwinia",
                    ],
                },
                StorageEntryMetadata {
                    name: "ConfirmedDepth",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        10,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "DagsMerkleRoots",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "u64",
                        value: "H128",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Dags merkle roots of ethereum epoch (each epoch is 30000)",
                    ],
                },
                StorageEntryMetadata {
                    name: "ReceiptVerifyFee",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "RingBalance<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                StorageEntryMetadata {
                    name: "PendingRelayHeaderParcels",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<\n(BlockNumber<T>, EthereumRelayHeaderParcel, RelayVotingState<AccountId<\n T>>)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [],
                },
            ],
        },
    ),
    calls: Some(
        [
            FunctionMetadata {
                name: "affirm",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "ethereum_relay_header_parcel",
                        ty: "EthereumRelayHeaderParcel",
                    },
                    FunctionArgumentMetadata {
                        name: "optional_ethereum_relay_proofs",
                        ty: "Option<EthereumRelayProofs>",
                    },
                ],
                documentation: [],
            },
            FunctionMetadata {
                name: "dispute_and_affirm",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "ethereum_relay_header_parcel",
                        ty: "EthereumRelayHeaderParcel",
                    },
                    FunctionArgumentMetadata {
                        name: "optional_ethereum_relay_proofs",
                        ty: "Option<EthereumRelayProofs>",
                    },
                ],
                documentation: [],
            },
            FunctionMetadata {
                name: "complete_relay_proofs",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "affirmation_id",
                        ty: "RelayAffirmationId<EthereumBlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "ethereum_relay_proofs",
                        ty: "Vec<EthereumRelayProofs>",
                    },
                ],
                documentation: [],
            },
            FunctionMetadata {
                name: "extend_affirmation",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "extended_ethereum_relay_affirmation_id",
                        ty: "RelayAffirmationId<EthereumBlockNumber>",
                    },
                    FunctionArgumentMetadata {
                        name: "game_sample_points",
                        ty: "Vec<EthereumRelayHeaderParcel>",
                    },
                    FunctionArgumentMetadata {
                        name: "optional_ethereum_relay_proofs",
                        ty: "Option<Vec<EthereumRelayProofs>>",
                    },
                ],
                documentation: [],
            },
            FunctionMetadata {
                name: "vote_pending_relay_header_parcel",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "ethereum_block_number",
                        ty: "EthereumBlockNumber",
                    },
                    FunctionArgumentMetadata {
                        name: "aye",
                        ty: "bool",
                    },
                ],
                documentation: [],
            },
            FunctionMetadata {
                name: "check_receipt",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "ethereum_proof_record",
                        ty: "EthereumReceiptProof",
                    },
                    FunctionArgumentMetadata {
                        name: "ethereum_header",
                        ty: "EthereumHeader",
                    },
                    FunctionArgumentMetadata {
                        name: "mmr_proof",
                        ty: "MMRProof",
                    },
                ],
                documentation: [
                    " Check and verify the receipt",
                    "",
                    " `check_receipt` will verify the validation of the ethereum receipt proof from ethereum.",
                    " Ethereum receipt proof are constructed with 3 parts.",
                    "",
                    " The first part `ethereum_proof_record` is the Ethereum receipt and its merkle member proof regarding",
                    " to the receipt root in related Ethereum block header.",
                    "",
                    " The second part `ethereum_header` is the Ethereum block header which included/generated this",
                    " receipt, we need to provide this as part of proof, because in Darwinia Relay, we only have",
                    " last confirmed block\'s MMR root, don\'t have previous blocks, so we need to include this to",
                    " provide the `receipt_root` inside it, we will need to verify validation by checking header hash.",
                    "",
                    " The third part `mmr_proof` is the mmr proof generate according to",
                    " `(member_index=[ethereum_header.number], last_index=last_confirmed_block_header.number)`",
                    " it can prove that the `ethereum_header` is the chain which is committed by last confirmed block\'s `mmr_root`",
                    "",
                    " The dispatch origin for this call must be `Signed` by the transactor.",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " - Limited Storage reads",
                    " - Up to one event",
                    "",
                    " Related functions:",
                    "",
                    "   - `set_receipt_verify_fee` can be used to set the verify fee for each receipt check.",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "set_receipt_verify_fee",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "new",
                        ty: "Compact<RingBalance<T>>",
                    },
                ],
                documentation: [
                    " Set verify receipt fee",
                    "",
                    " # <weight>",
                    " - `O(1)`.",
                    " - One storage write",
                    " # </weight>",
                ],
            },
            FunctionMetadata {
                name: "remove_confirmed_parcel_of",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "confirmed_block_number",
                        ty: "EthereumBlockNumber",
                    },
                ],
                documentation: [
                    " Remove the specific malicous confirmed parcel",
                ],
            },
            FunctionMetadata {
                name: "clean_confirmed_parcels",
                arguments: [],
                documentation: [
                    " Caution: the genesis parcel will be removed too",
                ],
            },
            FunctionMetadata {
                name: "set_confirmed_parcel",
                arguments: [
                    FunctionArgumentMetadata {
                        name: "ethereum_relay_header_parcel",
                        ty: "EthereumRelayHeaderParcel",
                    },
                ],
                documentation: [],
            },
        ],
    ),
    event: Some(
        [
            EventMetadata {
                name: "Affirmed",
                arguments: [
                    "AccountId",
                    "RelayAffirmationId",
                ],
                documentation: [
                    " A new relay header parcel affirmed. [relayer, relay affirmation id]",
                ],
            },
            EventMetadata {
                name: "DisputedAndAffirmed",
                arguments: [
                    "AccountId",
                    "RelayAffirmationId",
                ],
                documentation: [
                    " A different affirmation submitted, dispute found. [relayer, relay affirmation id]",
                ],
            },
            EventMetadata {
                name: "Extended",
                arguments: [
                    "AccountId",
                    "RelayAffirmationId",
                ],
                documentation: [
                    " An extended affirmation submitted, dispute go on. [relayer, relay affirmation id]",
                ],
            },
            EventMetadata {
                name: "NewRound",
                arguments: [
                    "EthereumBlockNumber",
                    "Vec<EthereumBlockNumber>",
                ],
                documentation: [
                    " A new round started. [game id, game sample points]",
                ],
            },
            EventMetadata {
                name: "GameOver",
                arguments: [
                    "EthereumBlockNumber",
                ],
                documentation: [
                    " A game has been settled. [game id]",
                ],
            },
            EventMetadata {
                name: "RemoveConfirmedParcel",
                arguments: [
                    "EthereumBlockNumber",
                ],
                documentation: [
                    " The specific confirmed parcel removed. [ethereum block number]",
                ],
            },
            EventMetadata {
                name: "VerifyReceipt",
                arguments: [
                    "AccountId",
                    "EthereumReceipt",
                    "EthereumHeader",
                ],
                documentation: [
                    " EthereumReceipt verification. [account, ethereum receipt, ethereum header]",
                ],
            },
            EventMetadata {
                name: "Pended",
                arguments: [
                    "EthereumBlockNumber",
                ],
                documentation: [
                    " A relay header parcel got pended. [ethereum block number]",
                ],
            },
            EventMetadata {
                name: "GuardVoted",
                arguments: [
                    "EthereumBlockNumber",
                    "bool",
                ],
                documentation: [
                    " A guard voted. [ethereum block number, aye]",
                ],
            },
            EventMetadata {
                name: "PendingRelayHeaderParcelConfirmed",
                arguments: [
                    "EthereumBlockNumber",
                    "Vec<u8>",
                ],
                documentation: [
                    " Pending relay header parcel confirmed. [ethereum block number, reason]",
                ],
            },
            EventMetadata {
                name: "PendingRelayHeaderParcelRejected",
                arguments: [
                    "EthereumBlockNumber",
                ],
                documentation: [
                    " Pending relay header parcel rejected. [ethereum block number]",
                ],
            },
        ],
    ),
    constants: [
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                101,
                116,
                104,
                114,
                108,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "ConfirmPeriod",
            ty: "BlockNumber<T>",
            value: [
                192,
                168,
                0,
                0,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "ApproveThreshold",
            ty: "Perbill",
            value: [
                0,
                70,
                195,
                35,
            ],
            documentation: [],
        },
        ModuleConstantMetadata {
            name: "RejectThreshold",
            ty: "Perbill",
            value: [
                128,
                150,
                152,
                0,
            ],
            documentation: [],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "HeaderInv",
            documentation: [
                " Header - INVALID",
            ],
        },
        ErrorMetadata {
            name: "ConfirmedBlocksC",
            documentation: [
                " Confirmed Blocks - CONFLICT",
            ],
        },
        ErrorMetadata {
            name: "ContinuousInv",
            documentation: [
                " Continuous - INVALID",
            ],
        },
        ErrorMetadata {
            name: "HeaderHashInv",
            documentation: [
                " Header Hash - INVALID",
            ],
        },
        ErrorMetadata {
            name: "MMRInv",
            documentation: [
                " MMR - INVALID",
            ],
        },
        ErrorMetadata {
            name: "HeaderHashMis",
            documentation: [
                " Header Hash - MISMATCHED",
            ],
        },
        ErrorMetadata {
            name: "ConfirmedHeaderNE",
            documentation: [
                " Confirmed Header - NOT EXISTED",
            ],
        },
        ErrorMetadata {
            name: "ReceiptProofInv",
            documentation: [
                " EthereumReceipt Proof - INVALID",
            ],
        },
        ErrorMetadata {
            name: "PendingRelayHeaderParcelNE",
            documentation: [
                " Pending Relay Header Parcel - NOT EXISTED",
            ],
        },
        ErrorMetadata {
            name: "PendingRelayHeaderParcelAE",
            documentation: [
                " Pending Relay Header Parcel - ALREADY EXISTED",
            ],
        },
        ErrorMetadata {
            name: "AlreadyVoteForAyeDup",
            documentation: [
                " Already Vote for Aye - DUPLICATED",
            ],
        },
        ErrorMetadata {
            name: "AlreadyVoteForNayDup",
            documentation: [
                " Already Vote for Nay - DUPLICATED",
            ],
        },
    ],
    index: 32,
}
 2020-11-21T11:59:29.647Z TRACE substrater::darwinia > ModuleMetadata {
    name: "EthereumRelayerGame",
    storage: Some(
        StorageMetadata {
            prefix: "Instance0DarwiniaRelayerGame",
            entries: [
                StorageEntryMetadata {
                    name: "RelayHeaderParcelToResolve",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<RelayHeaderId<T, I>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Active games\' relay header parcel\'s ids",
                    ],
                },
                StorageEntryMetadata {
                    name: "Affirmations",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Identity,
                        key1: "RelayHeaderId<T, I>",
                        key2: "u32",
                        value: "Vec<RelayAffirmationT<T, I>>",
                        key2_hasher: StorageHasher::Identity,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All the active games\' affirmations here",
                        "",
                        " The first key is game id, the second key is round index",
                        " then you will get the affirmations under that round in that game",
                    ],
                },
                StorageEntryMetadata {
                    name: "BestConfirmedHeaderId",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "RelayHeaderId<T, I>",
                        value: "RelayHeaderId<T, I>",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The best confirmed header id record of a game when it start",
                    ],
                },
                StorageEntryMetadata {
                    name: "RoundCounts",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "RelayHeaderId<T, I>",
                        value: "u32",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total rounds of a game",
                        "",
                        " `total rounds - 1 = last round index`",
                    ],
                },
                StorageEntryMetadata {
                    name: "AffirmTime",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "RelayHeaderId<T, I>",
                        value: "(BlockNumber<T>, u32)",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All the closed games here",
                        "",
                        " Game close at this moment, closed games won\'t accept any affirmation",
                    ],
                },
                StorageEntryMetadata {
                    name: "GamesToUpdate",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "BlockNumber<T>",
                        value: "Vec<RelayHeaderId<T, I>>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All the closed rounds here",
                        "",
                        " Record the closed rounds endpoint which use for settlling or updating",
                        " Settle or update a game will be scheduled which will start at this moment",
                    ],
                },
                StorageEntryMetadata {
                    name: "Stakes",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_128Concat,
                        key: "AccountId<T>",
                        value: "RingBalance<T, I>",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " All the stakes here",
                    ],
                },
                StorageEntryMetadata {
                    name: "GameSamplePoints",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "RelayHeaderId<T, I>",
                        value: "Vec<Vec<RelayHeaderId<T, I>>>",
                        unused: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [],
                },
            ],
        },
    ),
    calls: None,
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "MAX_ACTIVE_GAMES",
            ty: "u8",
            value: [
                32,
            ],
            documentation: [],
        },
    ],
    errors: [
        ErrorMetadata {
            name: "RelayParcelAR",
            documentation: [
                " Relay Parcel - ALREADY RELAIED",
            ],
        },
        ErrorMetadata {
            name: "RoundMis",
            documentation: [
                " Round - MISMATCHED",
            ],
        },
        ErrorMetadata {
            name: "ActiveGamesTM",
            documentation: [
                " Active Games - TOO MANY",
            ],
        },
        ErrorMetadata {
            name: "ExistedAffirmationsFoundC",
            documentation: [
                " Existed Affirmation(s) Found - CONFLICT",
            ],
        },
        ErrorMetadata {
            name: "GameAtThisRoundC",
            documentation: [
                " Game at This Round - CLOSED",
            ],
        },
        ErrorMetadata {
            name: "RelayAffirmationDup",
            documentation: [
                " Relay Affirmation - DUPLICATED",
            ],
        },
        ErrorMetadata {
            name: "StakeIns",
            documentation: [
                " Usable *RING* for Stake - INSUFFICIENT",
            ],
        },
        ErrorMetadata {
            name: "RelayProofsQuantityInv",
            documentation: [
                " Relay Proofs Quantity - INVALID",
            ],
        },
        ErrorMetadata {
            name: "RelayAffirmationNE",
            documentation: [
                " Relay Affirmation - NOT EXISTED",
            ],
        },
        ErrorMetadata {
            name: "ExtendedRelayAffirmationNE",
            documentation: [
                " Extended Relay Affirmation - NOT EXISTED",
            ],
        },
        ErrorMetadata {
            name: "PreviousRelayProofsInc",
            documentation: [
                " Previous Relay Proofs - INCOMPLETE",
            ],
        },
        ErrorMetadata {
            name: "PendingRelayParcelNE",
            documentation: [
                " Pending Relay Parcel - NOT EXISTED",
            ],
        },
    ],
    index: 33,
}
 2020-11-21T11:59:29.653Z TRACE substrater::darwinia > ModuleMetadata {
    name: "TronBacking",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaTronBacking",
            entries: [],
        },
    ),
    calls: None,
    event: None,
    constants: [
        ModuleConstantMetadata {
            name: "ModuleId",
            ty: "ModuleId",
            value: [
                100,
                97,
                47,
                116,
                114,
                111,
                98,
                107,
            ],
            documentation: [],
        },
    ],
    errors: [],
    index: 34,
}
 2020-11-21T11:59:29.653Z TRACE substrater::darwinia > ModuleMetadata {
    name: "HeaderMMR",
    storage: Some(
        StorageMetadata {
            prefix: "DarwiniaHeaderMMR",
            entries: [
                StorageEntryMetadata {
                    name: "MMRNodeList",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Identity,
                        key: "u64",
                        value: "T::Hash",
                        unused: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " MMR struct of the previous blocks, from first(genesis) to parent hash.",
                    ],
                },
                StorageEntryMetadata {
                    name: "MMRCounter",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The MMR size and length of the mmr node list",
                    ],
                },
            ],
        },
    ),
    calls: Some(
        [],
    ),
    event: None,
    constants: [],
    errors: [],
    index: 35,
}
